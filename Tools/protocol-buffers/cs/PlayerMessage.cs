// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlayerMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from PlayerMessage.proto</summary>
public static partial class PlayerMessageReflection {

  #region Descriptor
  /// <summary>File descriptor for PlayerMessage.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PlayerMessageReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChNQbGF5ZXJNZXNzYWdlLnByb3RvIocBCghMb2dpbkMyUxIPCgdhY2NvdW50",
          "GAEgASgJEhAKCHBhc3N3b3JkGAIgASgJEigKCF9tYXBUZXN0GAMgAygLMhYu",
          "TG9naW5DMlMuTWFwVGVzdEVudHJ5Gi4KDE1hcFRlc3RFbnRyeRILCgNrZXkY",
          "ASABKAUSDQoFdmFsdWUYAiABKAk6AjgBIq4CCgxHYW1lU2F2ZURhdGESDAoE",
          "dGltZRgBIAEoAhIfCgZwbGF5ZXIYAiABKAsyDy5QbGF5ZXJTYXZlRGF0YRIz",
          "CgtucGNTdGF0ZURjdBgDIAMoCzIeLkdhbWVTYXZlRGF0YS5OcGNTdGF0ZURj",
          "dEVudHJ5EjEKCnRyaWdnZXJEY3QYBCADKAsyHS5HYW1lU2F2ZURhdGEuVHJp",
          "Z2dlckRjdEVudHJ5GkEKEE5wY1N0YXRlRGN0RW50cnkSCwoDa2V5GAEgASgJ",
          "EhwKBXZhbHVlGAIgASgLMg0uU2NlbmVOUENEYXRhOgI4ARpECg9UcmlnZ2Vy",
          "RGN0RW50cnkSCwoDa2V5GAEgASgJEiAKBXZhbHVlGAIgASgLMhEuU2NlbmVU",
          "cmlnZ2VyRGF0YToCOAEiUgoQR2FtZU9iamVjdENvbmZpZxIJCgFwGAEgASgJ",
          "EgkKAWEYAiABKAgSEwoBdhgDIAEoCzIILlZlY3RvcjMSEwoBZRgEIAEoCzII",
          "LlZlY3RvcjMiLgoQU2NlbmVUcmlnZ2VyRGF0YRIaCgRpdGVtGAEgAygLMgwu",
          "VHJpZ2dlckl0ZW0ibgoLVHJpZ2dlckl0ZW0SCQoBcBgBIAEoCRIJCgF0GAIg",
          "ASgIEgkKAWEYAyABKAgSCQoBaRgEIAEoCRIJCgFjGAUgASgFEhMKAXYYBiAB",
          "KAsyCC5WZWN0b3IzEhMKAWUYByABKAsyCC5WZWN0b3IzIuADCg5QbGF5ZXJT",
          "YXZlRGF0YRISCgpjdXJyZW50RXhwGAEgASgCEg0KBWxldmVsGAIgASgFEhoK",
          "CHBvc2l0aW9uGAMgASgLMgguVmVjdG9yMxIdCgtldWxlckFuZ2xlcxgEIAEo",
          "CzIILlZlY3RvcjMSEAoIY3JuU3RhdGUYBSABKAUSNwoMc3RhdGVVc2VUaW1l",
          "GAYgAygLMiEuUGxheWVyU2F2ZURhdGEuU3RhdGVVc2VUaW1lRW50cnkSMwoK",
          "a2lsbFJlY29yZBgHIAMoCzIfLlBsYXllclNhdmVEYXRhLktpbGxSZWNvcmRF",
          "bnRyeRI5Cht1bml0QXR0cmlidXRlRW50aXR5X2N1cnJlbnQYCCABKAsyFC5V",
          "bml0QXR0cmlidXRlRW50aXR5EjUKF3VuaXRBdHRyaWJ1dGVFbnRpdHlfb3Jn",
          "GAkgASgLMhQuVW5pdEF0dHJpYnV0ZUVudGl0eRIWCg5Mb2NrR2FtZU9iamVj",
          "dBgKIAEoCRozChFTdGF0ZVVzZVRpbWVFbnRyeRILCgNrZXkYASABKAUSDQoF",
          "dmFsdWUYAiABKAI6AjgBGjEKD0tpbGxSZWNvcmRFbnRyeRILCgNrZXkYASAB",
          "KAkSDQoFdmFsdWUYAiABKAU6AjgBIioKB1ZlY3RvcjMSCQoBeBgBIAEoAhIJ",
          "CgF5GAIgASgCEgkKAXoYAyABKAIirA0KE1VuaXRBdHRyaWJ1dGVFbnRpdHkS",
          "CgoCSUQYASABKAUSDAoEVHlwZRgCIAEoBRIKCgJMdhgDIAEoBRIOCgZhdHRh",
          "Y2sYBCABKAISEAoIYnJlYWtpbmcYBSABKAISCgoCaHAYBiABKAISDwoHZGVm",
          "ZW5zZRgHIAEoAhIUCgxhdHRhY2tfc3BlZWQYCCABKAISDgoGcmVzdW1lGAkg",
          "ASgCEg8KB2ljZV9hdGsYCiABKAISEQoJZmxhbWVfYXRrGAsgASgCEhUKDWxp",
          "Z2h0bmluZ19hdGsYDCABKAISEQoJdG94aWNfYXRrGA0gASgCEhYKDmljZV9y",
          "ZXNpc3RhbmNlGA4gASgCEhgKEGZsYW1lX3Jlc2lzdGFuY2UYDyABKAISHAoU",
          "bGlnaHRuaW5nX3Jlc2lzdGFuY2UYECABKAISGAoQdG94aWNfcmVzaXN0YW5j",
          "ZRgRIAEoAhIXCg9mZWFyX3Jlc2lzdGFuY2UYEiABKAISGwoTcGh5c2ljYWxf",
          "cmVzaXN0YW5jZRgTIAEoAhIQCghoaXRfcmF0ZRgUIAEoAhINCgVldmFkZRgV",
          "IAEoAhIZChFjcml0aWNhbF9oaXRfcmF0ZRgWIAEoAhIaChJjcml0aWNhbF9o",
          "aXRfcmF0aW8YFyABKAISFwoPaW5jcmVhc2VfaW5qdXJ5GBggASgCEhgKEGlu",
          "anVyeV9yZWR1Y3Rpb24YGSABKAISEwoLdXBncmFkZV9leHAYGiABKAISFgoO",
          "cHJvZHVjdGlvbl9leHAYGyABKAISFgoOc2tpbGxfcG9pbnQzMnMYHCABKAIS",
          "GQoRYmxvY2tfcHJvYmFiaWxpdHkYKCABKAUSHgoWYmFja19ibG9ja19wcm9i",
          "YWJpbGl0eRgpIAEoBRIZChFkb2RnZV9wcm9iYWJpbGl0eRgqIAEoBRIhChlj",
          "b3VudGVyYXR0YWNrX3Byb2JhYmlsaXR5GCsgASgFEg0KBVBvd2VyGCwgASgF",
          "EhAKCE1heFBvd2VyGC0gASgFEhEKCVN0YXJ0VGltZRguIAEoAhIVCg1BZGRQ",
          "b3dlclNwZWVkGC8gASgCEhMKC0FkZFBvd2VyTnVtGDAgASgFEg0KBUFuZ2Vy",
          "GDEgASgCEhAKCE1heEFuZ2VyGDIgASgCEhwKFFN0YXJ0UmVkdWNlQW5nZXJU",
          "aW1lGDMgASgCEhcKD1JlZHVjZUFuZ2VyVGltZRg0IAEoAhIWCg5SZWR1Y2VB",
          "bmdlck51bRg1IAEoAhIOCgZRVEVOdW0YNiABKAISDwoHS2lsbE51bRg3IAEo",
          "AhIWCg5leGVjdXRpb25Ub3RhbBg4IAEoBRIYChBleGVjdXRpb25DdXREb3du",
          "GDkgASgFEh4KFmFuZ2VyX3JlY292ZXJ5X3BlcmNlbnQYOiABKAISFAoMYW5n",
          "ZXJfcmVkdWNlGDsgASgCEhgKEHN0YW1pbmFfcmVjb3ZlcnkYPCABKAISFQoN",
          "bW92ZV9zcGVlZF9leBg9IAEoAhINCgVzcGVlZBg+IAEoAhIUCgxhY2NlbGVy",
          "YXRpb24YPyABKAISFgoOc3RlZXJpbmdfc3BlZWQYQCABKAISEgoKTWF4RWxl",
          "bWVudBhBIAEoAhIeChZTdGFydFJlZHVjZUVsZW1lbnRUaW1lGEIgASgCEhkK",
          "EVJlZHVjZUVsZW1lbnRUaW1lGEMgASgCEhgKEFJlZHVjZUVsZW1lbnROdW0Y",
          "RCABKAISDAoEcF9leBhFIAEoAhIMCgRoX2V4GEYgASgCEgwKBHRfZXgYRyAB",
          "KAISDwoHY29pbl9leBhIIAEoAhIPCgdza2lsbGNkGEkgASgCEhoKEnBpZXJj",
          "ZV90aHJvdWdoX2RlZhhKIAEoAhIUCgxicmVha2luZ19wcm8YSyABKAISEgoK",
          "YnJlYWtpbmdfMRhMIAEoAhISCgpicmVha2luZ18yGE0gASgCEhIKCmJyZWFr",
          "aW5nXzMYTiABKAISFAoMc21hbGxfZGFtYWdlGE8gASgCEhUKDW1pZGRsZV9k",
          "YW1hZ2UYUCABKAISEgoKYmlnX2RhbWFnZRhRIAEoAhIXCg9maXhlZF9yZWR1",
          "Y3Rpb24YUiABKAISGQoRcGh5c2ljc19yZWR1Y3Rpb24YUyABKAISEQoJYW50",
          "aV9yaW90GFQgASgCEhYKDmNyaXRfcmVkdWN0aW9uGFUgASgCEg0KBWRlZl8x",
          "GFYgASgCEg0KBWRlZl8yGFcgASgCEg0KBWRlZl8zGFggASgCEg8KB2R1cl9l",
          "cXUYWSABKAISCwoDQ0RSGFogASgFIlUKCkhvcnNlX0RhdGESCgoCaWQYASAB",
          "KAUSDQoFc3RhdGUYAiABKAUSFQoDcG9zGAMgASgLMgguVmVjdG9yMxIVCgNy",
          "b3QYBCABKAsyCC5WZWN0b3IzImUKDFNjZW5lTlBDRGF0YRIhCgJhaRgBIAMo",
          "CzIVLlNjZW5lTlBDRGF0YS5BaUVudHJ5GjIKB0FpRW50cnkSCwoDa2V5GAEg",
          "ASgJEhYKBXZhbHVlGAIgASgLMgcuQUlEYXRhOgI4ASKcAwoGQUlEYXRhEgoK",
          "AmNzGAEgASgFEh0KAnRjGAIgASgLMhEuVGVhbUZvbGxvd0NvbmZpZxIgCgJh",
          "YxgDIAEoCzIULlVuaXRBdHRyaWJ1dGVFbnRpdHkSIAoCYW8YBCABKAsyFC5V",
          "bml0QXR0cmlidXRlRW50aXR5EgkKAW4YBSABKAkSCQoBeRgGIAEoCBILCgN1",
          "aWQYByABKAkSCQoBbBgIIAEoBRIJCgFnGAkgASgJEgkKAWMYCiABKAUSCgoC",
          "ZGkYCyABKAgSGwoCc3QYDCADKAsyDy5BSURhdGEuU3RFbnRyeRIdCgNzY2QY",
          "DSADKAsyEC5BSURhdGEuU2NkRW50cnkSFAoCc3AYDiABKAsyCC5WZWN0b3Iz",
          "EhQKAnNyGA8gASgLMgguVmVjdG9yMxIUCgJscBgQIAEoCzIILlZlY3RvcjMa",
          "KQoHU3RFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAI6AjgBGioK",
          "CFNjZEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoAjoCOAEiuwEK",
          "EFRlYW1Gb2xsb3dDb25maWcSEAoIZG9mb2xsb3cYASABKAgSEgoKYXR0YWNr",
          "VHlwZRgCIAEoBRIWCg5iZV9mb2xsb3dfdW5pdBgDIAEoCRITCgthdm9pZENv",
          "bWJhdBgEIAEoCBISCgpidWJibGVUZXh0GAUgASgJEhYKDmlzQWx3YXlzRm9s",
          "bG93GAYgASgIEhgKEG9uVGltZUxpbmVGb2xsb3cYByABKAgSDgoGaXNKdW1w",
          "GAggASgIYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginC2S), global::LoginC2S.Parser, new[]{ "Account", "Password", "MapTest" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameSaveData), global::GameSaveData.Parser, new[]{ "Time", "Player", "NpcStateDct", "TriggerDct" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameObjectConfig), global::GameObjectConfig.Parser, new[]{ "P", "A", "V", "E" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneTriggerData), global::SceneTriggerData.Parser, new[]{ "Item" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TriggerItem), global::TriggerItem.Parser, new[]{ "P", "T", "A", "I", "C", "V", "E" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerSaveData), global::PlayerSaveData.Parser, new[]{ "CurrentExp", "Level", "Position", "EulerAngles", "CrnState", "StateUseTime", "KillRecord", "UnitAttributeEntityCurrent", "UnitAttributeEntityOrg", "LockGameObject" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::Vector3), global::Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UnitAttributeEntity), global::UnitAttributeEntity.Parser, new[]{ "ID", "Type", "Lv", "Attack", "Breaking", "Hp", "Defense", "AttackSpeed", "Resume", "IceAtk", "FlameAtk", "LightningAtk", "ToxicAtk", "IceResistance", "FlameResistance", "LightningResistance", "ToxicResistance", "FearResistance", "PhysicalResistance", "HitRate", "Evade", "CriticalHitRate", "CriticalHitRatio", "IncreaseInjury", "InjuryReduction", "UpgradeExp", "ProductionExp", "SkillPoint32S", "BlockProbability", "BackBlockProbability", "DodgeProbability", "CounterattackProbability", "Power", "MaxPower", "StartTime", "AddPowerSpeed", "AddPowerNum", "Anger", "MaxAnger", "StartReduceAngerTime", "ReduceAngerTime", "ReduceAngerNum", "QTENum", "KillNum", "ExecutionTotal", "ExecutionCutDown", "AngerRecoveryPercent", "AngerReduce", "StaminaRecovery", "MoveSpeedEx", "Speed", "Acceleration", "SteeringSpeed", "MaxElement", "StartReduceElementTime", "ReduceElementTime", "ReduceElementNum", "PEx", "HEx", "TEx", "CoinEx", "Skillcd", "PierceThroughDef", "BreakingPro", "Breaking1", "Breaking2", "Breaking3", "SmallDamage", "MiddleDamage", "BigDamage", "FixedReduction", "PhysicsReduction", "AntiRiot", "CritReduction", "Def1", "Def2", "Def3", "DurEqu", "CDR" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Horse_Data), global::Horse_Data.Parser, new[]{ "Id", "State", "Pos", "Rot" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneNPCData), global::SceneNPCData.Parser, new[]{ "Ai" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::AIData), global::AIData.Parser, new[]{ "Cs", "Tc", "Ac", "Ao", "N", "Y", "Uid", "L", "G", "C", "Di", "St", "Scd", "Sp", "Sr", "Lp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::TeamFollowConfig), global::TeamFollowConfig.Parser, new[]{ "Dofollow", "AttackType", "BeFollowUnit", "AvoidCombat", "BubbleText", "IsAlwaysFollow", "OnTimeLineFollow", "IsJump" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class LoginC2S : pb::IMessage<LoginC2S>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<LoginC2S> _parser = new pb::MessageParser<LoginC2S>(() => new LoginC2S());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<LoginC2S> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerMessageReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LoginC2S() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LoginC2S(LoginC2S other) : this() {
    account_ = other.account_;
    password_ = other.password_;
    MapTest_ = other.MapTest_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public LoginC2S Clone() {
    return new LoginC2S(this);
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 1;
  private string account_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "_mapTest" field.</summary>
  public const int MapTestFieldNumber = 3;
  private static readonly pbc::MapField<int, string>.Codec _map_MapTest_codec
      = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 26);
  private readonly pbc::MapField<int, string> MapTest_ = new pbc::MapField<int, string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::MapField<int, string> MapTest {
    get { return MapTest_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as LoginC2S);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(LoginC2S other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Account != other.Account) return false;
    if (Password != other.Password) return false;
    if (!MapTest.Equals(other.MapTest)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    hash ^= MapTest.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Account.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Account);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    MapTest_.WriteTo(output, _map_MapTest_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Account.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Account);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    MapTest_.WriteTo(ref output, _map_MapTest_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    size += MapTest_.CalculateSize(_map_MapTest_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(LoginC2S other) {
    if (other == null) {
      return;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    MapTest_.Add(other.MapTest_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Account = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
        case 26: {
          MapTest_.AddEntriesFrom(input, _map_MapTest_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Account = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
        case 26: {
          MapTest_.AddEntriesFrom(ref input, _map_MapTest_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class GameSaveData : pb::IMessage<GameSaveData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GameSaveData> _parser = new pb::MessageParser<GameSaveData>(() => new GameSaveData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<GameSaveData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerMessageReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GameSaveData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GameSaveData(GameSaveData other) : this() {
    time_ = other.time_;
    player_ = other.player_ != null ? other.player_.Clone() : null;
    npcStateDct_ = other.npcStateDct_.Clone();
    triggerDct_ = other.triggerDct_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GameSaveData Clone() {
    return new GameSaveData(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private float time_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "player" field.</summary>
  public const int PlayerFieldNumber = 2;
  private global::PlayerSaveData player_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::PlayerSaveData Player {
    get { return player_; }
    set {
      player_ = value;
    }
  }

  /// <summary>Field number for the "npcStateDct" field.</summary>
  public const int NpcStateDctFieldNumber = 3;
  private static readonly pbc::MapField<string, global::SceneNPCData>.Codec _map_npcStateDct_codec
      = new pbc::MapField<string, global::SceneNPCData>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::SceneNPCData.Parser), 26);
  private readonly pbc::MapField<string, global::SceneNPCData> npcStateDct_ = new pbc::MapField<string, global::SceneNPCData>();
  /// <summary>
  ///场景NPC
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::MapField<string, global::SceneNPCData> NpcStateDct {
    get { return npcStateDct_; }
  }

  /// <summary>Field number for the "triggerDct" field.</summary>
  public const int TriggerDctFieldNumber = 4;
  private static readonly pbc::MapField<string, global::SceneTriggerData>.Codec _map_triggerDct_codec
      = new pbc::MapField<string, global::SceneTriggerData>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::SceneTriggerData.Parser), 34);
  private readonly pbc::MapField<string, global::SceneTriggerData> triggerDct_ = new pbc::MapField<string, global::SceneTriggerData>();
  /// <summary>
  ///场景触发器
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::MapField<string, global::SceneTriggerData> TriggerDct {
    get { return triggerDct_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as GameSaveData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(GameSaveData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
    if (!object.Equals(Player, other.Player)) return false;
    if (!NpcStateDct.Equals(other.NpcStateDct)) return false;
    if (!TriggerDct.Equals(other.TriggerDct)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
    if (player_ != null) hash ^= Player.GetHashCode();
    hash ^= NpcStateDct.GetHashCode();
    hash ^= TriggerDct.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Time != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(Time);
    }
    if (player_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Player);
    }
    npcStateDct_.WriteTo(output, _map_npcStateDct_codec);
    triggerDct_.WriteTo(output, _map_triggerDct_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Time != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(Time);
    }
    if (player_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Player);
    }
    npcStateDct_.WriteTo(ref output, _map_npcStateDct_codec);
    triggerDct_.WriteTo(ref output, _map_triggerDct_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Time != 0F) {
      size += 1 + 4;
    }
    if (player_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
    }
    size += npcStateDct_.CalculateSize(_map_npcStateDct_codec);
    size += triggerDct_.CalculateSize(_map_triggerDct_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(GameSaveData other) {
    if (other == null) {
      return;
    }
    if (other.Time != 0F) {
      Time = other.Time;
    }
    if (other.player_ != null) {
      if (player_ == null) {
        Player = new global::PlayerSaveData();
      }
      Player.MergeFrom(other.Player);
    }
    npcStateDct_.Add(other.npcStateDct_);
    triggerDct_.Add(other.triggerDct_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          Time = input.ReadFloat();
          break;
        }
        case 18: {
          if (player_ == null) {
            Player = new global::PlayerSaveData();
          }
          input.ReadMessage(Player);
          break;
        }
        case 26: {
          npcStateDct_.AddEntriesFrom(input, _map_npcStateDct_codec);
          break;
        }
        case 34: {
          triggerDct_.AddEntriesFrom(input, _map_triggerDct_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          Time = input.ReadFloat();
          break;
        }
        case 18: {
          if (player_ == null) {
            Player = new global::PlayerSaveData();
          }
          input.ReadMessage(Player);
          break;
        }
        case 26: {
          npcStateDct_.AddEntriesFrom(ref input, _map_npcStateDct_codec);
          break;
        }
        case 34: {
          triggerDct_.AddEntriesFrom(ref input, _map_triggerDct_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///物体配置
/// </summary>
public sealed partial class GameObjectConfig : pb::IMessage<GameObjectConfig>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<GameObjectConfig> _parser = new pb::MessageParser<GameObjectConfig>(() => new GameObjectConfig());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<GameObjectConfig> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerMessageReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GameObjectConfig() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GameObjectConfig(GameObjectConfig other) : this() {
    p_ = other.p_;
    a_ = other.a_;
    v_ = other.v_ != null ? other.v_.Clone() : null;
    e_ = other.e_ != null ? other.e_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public GameObjectConfig Clone() {
    return new GameObjectConfig(this);
  }

  /// <summary>Field number for the "p" field.</summary>
  public const int PFieldNumber = 1;
  private string p_ = "";
  /// <summary>
  ///路径
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string P {
    get { return p_; }
    set {
      p_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "a" field.</summary>
  public const int AFieldNumber = 2;
  private bool a_;
  /// <summary>
  ///激活 - 隐藏 (有必要改为int)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool A {
    get { return a_; }
    set {
      a_ = value;
    }
  }

  /// <summary>Field number for the "v" field.</summary>
  public const int VFieldNumber = 3;
  private global::Vector3 v_;
  /// <summary>
  ///当前位置 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector3 V {
    get { return v_; }
    set {
      v_ = value;
    }
  }

  /// <summary>Field number for the "e" field.</summary>
  public const int EFieldNumber = 4;
  private global::Vector3 e_;
  /// <summary>
  ///角度 缩放 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector3 E {
    get { return e_; }
    set {
      e_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as GameObjectConfig);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(GameObjectConfig other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (P != other.P) return false;
    if (A != other.A) return false;
    if (!object.Equals(V, other.V)) return false;
    if (!object.Equals(E, other.E)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (P.Length != 0) hash ^= P.GetHashCode();
    if (A != false) hash ^= A.GetHashCode();
    if (v_ != null) hash ^= V.GetHashCode();
    if (e_ != null) hash ^= E.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (P.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(P);
    }
    if (A != false) {
      output.WriteRawTag(16);
      output.WriteBool(A);
    }
    if (v_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(V);
    }
    if (e_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(E);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (P.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(P);
    }
    if (A != false) {
      output.WriteRawTag(16);
      output.WriteBool(A);
    }
    if (v_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(V);
    }
    if (e_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(E);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (P.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(P);
    }
    if (A != false) {
      size += 1 + 1;
    }
    if (v_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(V);
    }
    if (e_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(E);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(GameObjectConfig other) {
    if (other == null) {
      return;
    }
    if (other.P.Length != 0) {
      P = other.P;
    }
    if (other.A != false) {
      A = other.A;
    }
    if (other.v_ != null) {
      if (v_ == null) {
        V = new global::Vector3();
      }
      V.MergeFrom(other.V);
    }
    if (other.e_ != null) {
      if (e_ == null) {
        E = new global::Vector3();
      }
      E.MergeFrom(other.E);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          P = input.ReadString();
          break;
        }
        case 16: {
          A = input.ReadBool();
          break;
        }
        case 26: {
          if (v_ == null) {
            V = new global::Vector3();
          }
          input.ReadMessage(V);
          break;
        }
        case 34: {
          if (e_ == null) {
            E = new global::Vector3();
          }
          input.ReadMessage(E);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          P = input.ReadString();
          break;
        }
        case 16: {
          A = input.ReadBool();
          break;
        }
        case 26: {
          if (v_ == null) {
            V = new global::Vector3();
          }
          input.ReadMessage(V);
          break;
        }
        case 34: {
          if (e_ == null) {
            E = new global::Vector3();
          }
          input.ReadMessage(E);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///场景触发器
/// </summary>
public sealed partial class SceneTriggerData : pb::IMessage<SceneTriggerData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SceneTriggerData> _parser = new pb::MessageParser<SceneTriggerData>(() => new SceneTriggerData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SceneTriggerData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerMessageReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SceneTriggerData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SceneTriggerData(SceneTriggerData other) : this() {
    item_ = other.item_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SceneTriggerData Clone() {
    return new SceneTriggerData(this);
  }

  /// <summary>Field number for the "item" field.</summary>
  public const int ItemFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TriggerItem> _repeated_item_codec
      = pb::FieldCodec.ForMessage(10, global::TriggerItem.Parser);
  private readonly pbc::RepeatedField<global::TriggerItem> item_ = new pbc::RepeatedField<global::TriggerItem>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::TriggerItem> Item {
    get { return item_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SceneTriggerData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SceneTriggerData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!item_.Equals(other.item_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= item_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    item_.WriteTo(output, _repeated_item_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    item_.WriteTo(ref output, _repeated_item_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += item_.CalculateSize(_repeated_item_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SceneTriggerData other) {
    if (other == null) {
      return;
    }
    item_.Add(other.item_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          item_.AddEntriesFrom(input, _repeated_item_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          item_.AddEntriesFrom(ref input, _repeated_item_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///触发器保存的数据
/// </summary>
public sealed partial class TriggerItem : pb::IMessage<TriggerItem>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<TriggerItem> _parser = new pb::MessageParser<TriggerItem>(() => new TriggerItem());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<TriggerItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerMessageReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public TriggerItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public TriggerItem(TriggerItem other) : this() {
    p_ = other.p_;
    t_ = other.t_;
    a_ = other.a_;
    i_ = other.i_;
    c_ = other.c_;
    v_ = other.v_ != null ? other.v_.Clone() : null;
    e_ = other.e_ != null ? other.e_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public TriggerItem Clone() {
    return new TriggerItem(this);
  }

  /// <summary>Field number for the "p" field.</summary>
  public const int PFieldNumber = 1;
  private string p_ = "";
  /// <summary>
  ///path 路径
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string P {
    get { return p_; }
    set {
      p_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "t" field.</summary>
  public const int TFieldNumber = 2;
  private bool t_;
  /// <summary>
  ///isTrigger 是否触发器
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool T {
    get { return t_; }
    set {
      t_ = value;
    }
  }

  /// <summary>Field number for the "a" field.</summary>
  public const int AFieldNumber = 3;
  private bool a_;
  /// <summary>
  ///activeSelf 激活 - 隐藏 (有必要改为int)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool A {
    get { return a_; }
    set {
      a_ = value;
    }
  }

  /// <summary>Field number for the "i" field.</summary>
  public const int IFieldNumber = 4;
  private string i_ = "";
  /// <summary>
  ///id 触发器ID 可能因为完成条件后进行修改
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string I {
    get { return i_; }
    set {
      i_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "c" field.</summary>
  public const int CFieldNumber = 5;
  private int c_;
  /// <summary>
  ///completeCount 已完成次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int C {
    get { return c_; }
    set {
      c_ = value;
    }
  }

  /// <summary>Field number for the "v" field.</summary>
  public const int VFieldNumber = 6;
  private global::Vector3 v_;
  /// <summary>
  ///position
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector3 V {
    get { return v_; }
    set {
      v_ = value;
    }
  }

  /// <summary>Field number for the "e" field.</summary>
  public const int EFieldNumber = 7;
  private global::Vector3 e_;
  /// <summary>
  ///eulerAngles
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector3 E {
    get { return e_; }
    set {
      e_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as TriggerItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(TriggerItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (P != other.P) return false;
    if (T != other.T) return false;
    if (A != other.A) return false;
    if (I != other.I) return false;
    if (C != other.C) return false;
    if (!object.Equals(V, other.V)) return false;
    if (!object.Equals(E, other.E)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (P.Length != 0) hash ^= P.GetHashCode();
    if (T != false) hash ^= T.GetHashCode();
    if (A != false) hash ^= A.GetHashCode();
    if (I.Length != 0) hash ^= I.GetHashCode();
    if (C != 0) hash ^= C.GetHashCode();
    if (v_ != null) hash ^= V.GetHashCode();
    if (e_ != null) hash ^= E.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (P.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(P);
    }
    if (T != false) {
      output.WriteRawTag(16);
      output.WriteBool(T);
    }
    if (A != false) {
      output.WriteRawTag(24);
      output.WriteBool(A);
    }
    if (I.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(I);
    }
    if (C != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(C);
    }
    if (v_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(V);
    }
    if (e_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(E);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (P.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(P);
    }
    if (T != false) {
      output.WriteRawTag(16);
      output.WriteBool(T);
    }
    if (A != false) {
      output.WriteRawTag(24);
      output.WriteBool(A);
    }
    if (I.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(I);
    }
    if (C != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(C);
    }
    if (v_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(V);
    }
    if (e_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(E);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (P.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(P);
    }
    if (T != false) {
      size += 1 + 1;
    }
    if (A != false) {
      size += 1 + 1;
    }
    if (I.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(I);
    }
    if (C != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(C);
    }
    if (v_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(V);
    }
    if (e_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(E);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(TriggerItem other) {
    if (other == null) {
      return;
    }
    if (other.P.Length != 0) {
      P = other.P;
    }
    if (other.T != false) {
      T = other.T;
    }
    if (other.A != false) {
      A = other.A;
    }
    if (other.I.Length != 0) {
      I = other.I;
    }
    if (other.C != 0) {
      C = other.C;
    }
    if (other.v_ != null) {
      if (v_ == null) {
        V = new global::Vector3();
      }
      V.MergeFrom(other.V);
    }
    if (other.e_ != null) {
      if (e_ == null) {
        E = new global::Vector3();
      }
      E.MergeFrom(other.E);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          P = input.ReadString();
          break;
        }
        case 16: {
          T = input.ReadBool();
          break;
        }
        case 24: {
          A = input.ReadBool();
          break;
        }
        case 34: {
          I = input.ReadString();
          break;
        }
        case 40: {
          C = input.ReadInt32();
          break;
        }
        case 50: {
          if (v_ == null) {
            V = new global::Vector3();
          }
          input.ReadMessage(V);
          break;
        }
        case 58: {
          if (e_ == null) {
            E = new global::Vector3();
          }
          input.ReadMessage(E);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          P = input.ReadString();
          break;
        }
        case 16: {
          T = input.ReadBool();
          break;
        }
        case 24: {
          A = input.ReadBool();
          break;
        }
        case 34: {
          I = input.ReadString();
          break;
        }
        case 40: {
          C = input.ReadInt32();
          break;
        }
        case 50: {
          if (v_ == null) {
            V = new global::Vector3();
          }
          input.ReadMessage(V);
          break;
        }
        case 58: {
          if (e_ == null) {
            E = new global::Vector3();
          }
          input.ReadMessage(E);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///主角保存的数据
/// </summary>
public sealed partial class PlayerSaveData : pb::IMessage<PlayerSaveData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PlayerSaveData> _parser = new pb::MessageParser<PlayerSaveData>(() => new PlayerSaveData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<PlayerSaveData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerMessageReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PlayerSaveData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PlayerSaveData(PlayerSaveData other) : this() {
    currentExp_ = other.currentExp_;
    level_ = other.level_;
    position_ = other.position_ != null ? other.position_.Clone() : null;
    eulerAngles_ = other.eulerAngles_ != null ? other.eulerAngles_.Clone() : null;
    crnState_ = other.crnState_;
    stateUseTime_ = other.stateUseTime_.Clone();
    killRecord_ = other.killRecord_.Clone();
    unitAttributeEntityCurrent_ = other.unitAttributeEntityCurrent_ != null ? other.unitAttributeEntityCurrent_.Clone() : null;
    unitAttributeEntityOrg_ = other.unitAttributeEntityOrg_ != null ? other.unitAttributeEntityOrg_.Clone() : null;
    lockGameObject_ = other.lockGameObject_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PlayerSaveData Clone() {
    return new PlayerSaveData(this);
  }

  /// <summary>Field number for the "currentExp" field.</summary>
  public const int CurrentExpFieldNumber = 1;
  private float currentExp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float CurrentExp {
    get { return currentExp_; }
    set {
      currentExp_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 3;
  private global::Vector3 position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector3 Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "eulerAngles" field.</summary>
  public const int EulerAnglesFieldNumber = 4;
  private global::Vector3 eulerAngles_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector3 EulerAngles {
    get { return eulerAngles_; }
    set {
      eulerAngles_ = value;
    }
  }

  /// <summary>Field number for the "crnState" field.</summary>
  public const int CrnStateFieldNumber = 5;
  private int crnState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CrnState {
    get { return crnState_; }
    set {
      crnState_ = value;
    }
  }

  /// <summary>Field number for the "stateUseTime" field.</summary>
  public const int StateUseTimeFieldNumber = 6;
  private static readonly pbc::MapField<int, float>.Codec _map_stateUseTime_codec
      = new pbc::MapField<int, float>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForFloat(21, 0F), 50);
  private readonly pbc::MapField<int, float> stateUseTime_ = new pbc::MapField<int, float>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::MapField<int, float> StateUseTime {
    get { return stateUseTime_; }
  }

  /// <summary>Field number for the "killRecord" field.</summary>
  public const int KillRecordFieldNumber = 7;
  private static readonly pbc::MapField<string, int>.Codec _map_killRecord_codec
      = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt32(16, 0), 58);
  private readonly pbc::MapField<string, int> killRecord_ = new pbc::MapField<string, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::MapField<string, int> KillRecord {
    get { return killRecord_; }
  }

  /// <summary>Field number for the "unitAttributeEntity_current" field.</summary>
  public const int UnitAttributeEntityCurrentFieldNumber = 8;
  private global::UnitAttributeEntity unitAttributeEntityCurrent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::UnitAttributeEntity UnitAttributeEntityCurrent {
    get { return unitAttributeEntityCurrent_; }
    set {
      unitAttributeEntityCurrent_ = value;
    }
  }

  /// <summary>Field number for the "unitAttributeEntity_org" field.</summary>
  public const int UnitAttributeEntityOrgFieldNumber = 9;
  private global::UnitAttributeEntity unitAttributeEntityOrg_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::UnitAttributeEntity UnitAttributeEntityOrg {
    get { return unitAttributeEntityOrg_; }
    set {
      unitAttributeEntityOrg_ = value;
    }
  }

  /// <summary>Field number for the "LockGameObject" field.</summary>
  public const int LockGameObjectFieldNumber = 10;
  private string lockGameObject_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string LockGameObject {
    get { return lockGameObject_; }
    set {
      lockGameObject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as PlayerSaveData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(PlayerSaveData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentExp, other.CurrentExp)) return false;
    if (Level != other.Level) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (!object.Equals(EulerAngles, other.EulerAngles)) return false;
    if (CrnState != other.CrnState) return false;
    if (!StateUseTime.Equals(other.StateUseTime)) return false;
    if (!KillRecord.Equals(other.KillRecord)) return false;
    if (!object.Equals(UnitAttributeEntityCurrent, other.UnitAttributeEntityCurrent)) return false;
    if (!object.Equals(UnitAttributeEntityOrg, other.UnitAttributeEntityOrg)) return false;
    if (LockGameObject != other.LockGameObject) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (CurrentExp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentExp);
    if (Level != 0) hash ^= Level.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (eulerAngles_ != null) hash ^= EulerAngles.GetHashCode();
    if (CrnState != 0) hash ^= CrnState.GetHashCode();
    hash ^= StateUseTime.GetHashCode();
    hash ^= KillRecord.GetHashCode();
    if (unitAttributeEntityCurrent_ != null) hash ^= UnitAttributeEntityCurrent.GetHashCode();
    if (unitAttributeEntityOrg_ != null) hash ^= UnitAttributeEntityOrg.GetHashCode();
    if (LockGameObject.Length != 0) hash ^= LockGameObject.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (CurrentExp != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(CurrentExp);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (position_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Position);
    }
    if (eulerAngles_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(EulerAngles);
    }
    if (CrnState != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CrnState);
    }
    stateUseTime_.WriteTo(output, _map_stateUseTime_codec);
    killRecord_.WriteTo(output, _map_killRecord_codec);
    if (unitAttributeEntityCurrent_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(UnitAttributeEntityCurrent);
    }
    if (unitAttributeEntityOrg_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(UnitAttributeEntityOrg);
    }
    if (LockGameObject.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(LockGameObject);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (CurrentExp != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(CurrentExp);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (position_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Position);
    }
    if (eulerAngles_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(EulerAngles);
    }
    if (CrnState != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CrnState);
    }
    stateUseTime_.WriteTo(ref output, _map_stateUseTime_codec);
    killRecord_.WriteTo(ref output, _map_killRecord_codec);
    if (unitAttributeEntityCurrent_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(UnitAttributeEntityCurrent);
    }
    if (unitAttributeEntityOrg_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(UnitAttributeEntityOrg);
    }
    if (LockGameObject.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(LockGameObject);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (CurrentExp != 0F) {
      size += 1 + 4;
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (eulerAngles_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EulerAngles);
    }
    if (CrnState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrnState);
    }
    size += stateUseTime_.CalculateSize(_map_stateUseTime_codec);
    size += killRecord_.CalculateSize(_map_killRecord_codec);
    if (unitAttributeEntityCurrent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitAttributeEntityCurrent);
    }
    if (unitAttributeEntityOrg_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitAttributeEntityOrg);
    }
    if (LockGameObject.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LockGameObject);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(PlayerSaveData other) {
    if (other == null) {
      return;
    }
    if (other.CurrentExp != 0F) {
      CurrentExp = other.CurrentExp;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::Vector3();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.eulerAngles_ != null) {
      if (eulerAngles_ == null) {
        EulerAngles = new global::Vector3();
      }
      EulerAngles.MergeFrom(other.EulerAngles);
    }
    if (other.CrnState != 0) {
      CrnState = other.CrnState;
    }
    stateUseTime_.Add(other.stateUseTime_);
    killRecord_.Add(other.killRecord_);
    if (other.unitAttributeEntityCurrent_ != null) {
      if (unitAttributeEntityCurrent_ == null) {
        UnitAttributeEntityCurrent = new global::UnitAttributeEntity();
      }
      UnitAttributeEntityCurrent.MergeFrom(other.UnitAttributeEntityCurrent);
    }
    if (other.unitAttributeEntityOrg_ != null) {
      if (unitAttributeEntityOrg_ == null) {
        UnitAttributeEntityOrg = new global::UnitAttributeEntity();
      }
      UnitAttributeEntityOrg.MergeFrom(other.UnitAttributeEntityOrg);
    }
    if (other.LockGameObject.Length != 0) {
      LockGameObject = other.LockGameObject;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          CurrentExp = input.ReadFloat();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 26: {
          if (position_ == null) {
            Position = new global::Vector3();
          }
          input.ReadMessage(Position);
          break;
        }
        case 34: {
          if (eulerAngles_ == null) {
            EulerAngles = new global::Vector3();
          }
          input.ReadMessage(EulerAngles);
          break;
        }
        case 40: {
          CrnState = input.ReadInt32();
          break;
        }
        case 50: {
          stateUseTime_.AddEntriesFrom(input, _map_stateUseTime_codec);
          break;
        }
        case 58: {
          killRecord_.AddEntriesFrom(input, _map_killRecord_codec);
          break;
        }
        case 66: {
          if (unitAttributeEntityCurrent_ == null) {
            UnitAttributeEntityCurrent = new global::UnitAttributeEntity();
          }
          input.ReadMessage(UnitAttributeEntityCurrent);
          break;
        }
        case 74: {
          if (unitAttributeEntityOrg_ == null) {
            UnitAttributeEntityOrg = new global::UnitAttributeEntity();
          }
          input.ReadMessage(UnitAttributeEntityOrg);
          break;
        }
        case 82: {
          LockGameObject = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          CurrentExp = input.ReadFloat();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 26: {
          if (position_ == null) {
            Position = new global::Vector3();
          }
          input.ReadMessage(Position);
          break;
        }
        case 34: {
          if (eulerAngles_ == null) {
            EulerAngles = new global::Vector3();
          }
          input.ReadMessage(EulerAngles);
          break;
        }
        case 40: {
          CrnState = input.ReadInt32();
          break;
        }
        case 50: {
          stateUseTime_.AddEntriesFrom(ref input, _map_stateUseTime_codec);
          break;
        }
        case 58: {
          killRecord_.AddEntriesFrom(ref input, _map_killRecord_codec);
          break;
        }
        case 66: {
          if (unitAttributeEntityCurrent_ == null) {
            UnitAttributeEntityCurrent = new global::UnitAttributeEntity();
          }
          input.ReadMessage(UnitAttributeEntityCurrent);
          break;
        }
        case 74: {
          if (unitAttributeEntityOrg_ == null) {
            UnitAttributeEntityOrg = new global::UnitAttributeEntity();
          }
          input.ReadMessage(UnitAttributeEntityOrg);
          break;
        }
        case 82: {
          LockGameObject = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///三维向量
/// </summary>
public sealed partial class Vector3 : pb::IMessage<Vector3>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerMessageReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Vector3() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Vector3(Vector3 other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Vector3 Clone() {
    return new Vector3(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as Vector3);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(Vector3 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(Vector3 other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///属性
/// </summary>
public sealed partial class UnitAttributeEntity : pb::IMessage<UnitAttributeEntity>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<UnitAttributeEntity> _parser = new pb::MessageParser<UnitAttributeEntity>(() => new UnitAttributeEntity());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<UnitAttributeEntity> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerMessageReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public UnitAttributeEntity() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public UnitAttributeEntity(UnitAttributeEntity other) : this() {
    iD_ = other.iD_;
    type_ = other.type_;
    lv_ = other.lv_;
    attack_ = other.attack_;
    breaking_ = other.breaking_;
    hp_ = other.hp_;
    defense_ = other.defense_;
    attackSpeed_ = other.attackSpeed_;
    resume_ = other.resume_;
    iceAtk_ = other.iceAtk_;
    flameAtk_ = other.flameAtk_;
    lightningAtk_ = other.lightningAtk_;
    toxicAtk_ = other.toxicAtk_;
    iceResistance_ = other.iceResistance_;
    flameResistance_ = other.flameResistance_;
    lightningResistance_ = other.lightningResistance_;
    toxicResistance_ = other.toxicResistance_;
    fearResistance_ = other.fearResistance_;
    physicalResistance_ = other.physicalResistance_;
    hitRate_ = other.hitRate_;
    evade_ = other.evade_;
    criticalHitRate_ = other.criticalHitRate_;
    criticalHitRatio_ = other.criticalHitRatio_;
    increaseInjury_ = other.increaseInjury_;
    injuryReduction_ = other.injuryReduction_;
    upgradeExp_ = other.upgradeExp_;
    productionExp_ = other.productionExp_;
    skillPoint32S_ = other.skillPoint32S_;
    blockProbability_ = other.blockProbability_;
    backBlockProbability_ = other.backBlockProbability_;
    dodgeProbability_ = other.dodgeProbability_;
    counterattackProbability_ = other.counterattackProbability_;
    power_ = other.power_;
    maxPower_ = other.maxPower_;
    startTime_ = other.startTime_;
    addPowerSpeed_ = other.addPowerSpeed_;
    addPowerNum_ = other.addPowerNum_;
    anger_ = other.anger_;
    maxAnger_ = other.maxAnger_;
    startReduceAngerTime_ = other.startReduceAngerTime_;
    reduceAngerTime_ = other.reduceAngerTime_;
    reduceAngerNum_ = other.reduceAngerNum_;
    qTENum_ = other.qTENum_;
    killNum_ = other.killNum_;
    executionTotal_ = other.executionTotal_;
    executionCutDown_ = other.executionCutDown_;
    angerRecoveryPercent_ = other.angerRecoveryPercent_;
    angerReduce_ = other.angerReduce_;
    staminaRecovery_ = other.staminaRecovery_;
    moveSpeedEx_ = other.moveSpeedEx_;
    speed_ = other.speed_;
    acceleration_ = other.acceleration_;
    steeringSpeed_ = other.steeringSpeed_;
    maxElement_ = other.maxElement_;
    startReduceElementTime_ = other.startReduceElementTime_;
    reduceElementTime_ = other.reduceElementTime_;
    reduceElementNum_ = other.reduceElementNum_;
    pEx_ = other.pEx_;
    hEx_ = other.hEx_;
    tEx_ = other.tEx_;
    coinEx_ = other.coinEx_;
    skillcd_ = other.skillcd_;
    pierceThroughDef_ = other.pierceThroughDef_;
    breakingPro_ = other.breakingPro_;
    breaking1_ = other.breaking1_;
    breaking2_ = other.breaking2_;
    breaking3_ = other.breaking3_;
    smallDamage_ = other.smallDamage_;
    middleDamage_ = other.middleDamage_;
    bigDamage_ = other.bigDamage_;
    fixedReduction_ = other.fixedReduction_;
    physicsReduction_ = other.physicsReduction_;
    antiRiot_ = other.antiRiot_;
    critReduction_ = other.critReduction_;
    def1_ = other.def1_;
    def2_ = other.def2_;
    def3_ = other.def3_;
    durEqu_ = other.durEqu_;
    cDR_ = other.cDR_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public UnitAttributeEntity Clone() {
    return new UnitAttributeEntity(this);
  }

  /// <summary>Field number for the "ID" field.</summary>
  public const int IDFieldNumber = 1;
  private int iD_;
  /// <summary>
  ///ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ID {
    get { return iD_; }
    set {
      iD_ = value;
    }
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  ///分组
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "Lv" field.</summary>
  public const int LvFieldNumber = 3;
  private int lv_;
  /// <summary>
  ///等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Lv {
    get { return lv_; }
    set {
      lv_ = value;
    }
  }

  /// <summary>Field number for the "attack" field.</summary>
  public const int AttackFieldNumber = 4;
  private float attack_;
  /// <summary>
  ///攻击力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Attack {
    get { return attack_; }
    set {
      attack_ = value;
    }
  }

  /// <summary>Field number for the "breaking" field.</summary>
  public const int BreakingFieldNumber = 5;
  private float breaking_;
  /// <summary>
  ///破防
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Breaking {
    get { return breaking_; }
    set {
      breaking_ = value;
    }
  }

  /// <summary>Field number for the "hp" field.</summary>
  public const int HpFieldNumber = 6;
  private float hp_;
  /// <summary>
  ///血量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Hp {
    get { return hp_; }
    set {
      hp_ = value;
    }
  }

  /// <summary>Field number for the "defense" field.</summary>
  public const int DefenseFieldNumber = 7;
  private float defense_;
  /// <summary>
  ///防御
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Defense {
    get { return defense_; }
    set {
      defense_ = value;
    }
  }

  /// <summary>Field number for the "attack_speed" field.</summary>
  public const int AttackSpeedFieldNumber = 8;
  private float attackSpeed_;
  /// <summary>
  ///攻速
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float AttackSpeed {
    get { return attackSpeed_; }
    set {
      attackSpeed_ = value;
    }
  }

  /// <summary>Field number for the "resume" field.</summary>
  public const int ResumeFieldNumber = 9;
  private float resume_;
  /// <summary>
  ///回血
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Resume {
    get { return resume_; }
    set {
      resume_ = value;
    }
  }

  /// <summary>Field number for the "ice_atk" field.</summary>
  public const int IceAtkFieldNumber = 10;
  private float iceAtk_;
  /// <summary>
  ///寒冰攻击
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float IceAtk {
    get { return iceAtk_; }
    set {
      iceAtk_ = value;
    }
  }

  /// <summary>Field number for the "flame_atk" field.</summary>
  public const int FlameAtkFieldNumber = 11;
  private float flameAtk_;
  /// <summary>
  ///火焰攻击
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float FlameAtk {
    get { return flameAtk_; }
    set {
      flameAtk_ = value;
    }
  }

  /// <summary>Field number for the "lightning_atk" field.</summary>
  public const int LightningAtkFieldNumber = 12;
  private float lightningAtk_;
  /// <summary>
  ///雷电攻击
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float LightningAtk {
    get { return lightningAtk_; }
    set {
      lightningAtk_ = value;
    }
  }

  /// <summary>Field number for the "toxic_atk" field.</summary>
  public const int ToxicAtkFieldNumber = 13;
  private float toxicAtk_;
  /// <summary>
  ///毒素攻击
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float ToxicAtk {
    get { return toxicAtk_; }
    set {
      toxicAtk_ = value;
    }
  }

  /// <summary>Field number for the "ice_resistance" field.</summary>
  public const int IceResistanceFieldNumber = 14;
  private float iceResistance_;
  /// <summary>
  ///寒冰抗性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float IceResistance {
    get { return iceResistance_; }
    set {
      iceResistance_ = value;
    }
  }

  /// <summary>Field number for the "flame_resistance" field.</summary>
  public const int FlameResistanceFieldNumber = 15;
  private float flameResistance_;
  /// <summary>
  ///火焰抗性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float FlameResistance {
    get { return flameResistance_; }
    set {
      flameResistance_ = value;
    }
  }

  /// <summary>Field number for the "lightning_resistance" field.</summary>
  public const int LightningResistanceFieldNumber = 16;
  private float lightningResistance_;
  /// <summary>
  ///雷电抗性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float LightningResistance {
    get { return lightningResistance_; }
    set {
      lightningResistance_ = value;
    }
  }

  /// <summary>Field number for the "toxic_resistance" field.</summary>
  public const int ToxicResistanceFieldNumber = 17;
  private float toxicResistance_;
  /// <summary>
  ///毒素抗性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float ToxicResistance {
    get { return toxicResistance_; }
    set {
      toxicResistance_ = value;
    }
  }

  /// <summary>Field number for the "fear_resistance" field.</summary>
  public const int FearResistanceFieldNumber = 18;
  private float fearResistance_;
  /// <summary>
  ///恐惧抗性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float FearResistance {
    get { return fearResistance_; }
    set {
      fearResistance_ = value;
    }
  }

  /// <summary>Field number for the "physical_resistance" field.</summary>
  public const int PhysicalResistanceFieldNumber = 19;
  private float physicalResistance_;
  /// <summary>
  ///物理抗性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float PhysicalResistance {
    get { return physicalResistance_; }
    set {
      physicalResistance_ = value;
    }
  }

  /// <summary>Field number for the "hit_rate" field.</summary>
  public const int HitRateFieldNumber = 20;
  private float hitRate_;
  /// <summary>
  ///命中率
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float HitRate {
    get { return hitRate_; }
    set {
      hitRate_ = value;
    }
  }

  /// <summary>Field number for the "evade" field.</summary>
  public const int EvadeFieldNumber = 21;
  private float evade_;
  /// <summary>
  ///闪避率
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Evade {
    get { return evade_; }
    set {
      evade_ = value;
    }
  }

  /// <summary>Field number for the "critical_hit_rate" field.</summary>
  public const int CriticalHitRateFieldNumber = 22;
  private float criticalHitRate_;
  /// <summary>
  ///暴击率
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float CriticalHitRate {
    get { return criticalHitRate_; }
    set {
      criticalHitRate_ = value;
    }
  }

  /// <summary>Field number for the "critical_hit_ratio" field.</summary>
  public const int CriticalHitRatioFieldNumber = 23;
  private float criticalHitRatio_;
  /// <summary>
  ///暴击伤害
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float CriticalHitRatio {
    get { return criticalHitRatio_; }
    set {
      criticalHitRatio_ = value;
    }
  }

  /// <summary>Field number for the "increase_injury" field.</summary>
  public const int IncreaseInjuryFieldNumber = 24;
  private float increaseInjury_;
  /// <summary>
  ///增伤
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float IncreaseInjury {
    get { return increaseInjury_; }
    set {
      increaseInjury_ = value;
    }
  }

  /// <summary>Field number for the "injury_reduction" field.</summary>
  public const int InjuryReductionFieldNumber = 25;
  private float injuryReduction_;
  /// <summary>
  ///减伤
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float InjuryReduction {
    get { return injuryReduction_; }
    set {
      injuryReduction_ = value;
    }
  }

  /// <summary>Field number for the "upgrade_exp" field.</summary>
  public const int UpgradeExpFieldNumber = 26;
  private float upgradeExp_;
  /// <summary>
  ///升级经验
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float UpgradeExp {
    get { return upgradeExp_; }
    set {
      upgradeExp_ = value;
    }
  }

  /// <summary>Field number for the "production_exp" field.</summary>
  public const int ProductionExpFieldNumber = 27;
  private float productionExp_;
  /// <summary>
  ///击杀产出经验
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float ProductionExp {
    get { return productionExp_; }
    set {
      productionExp_ = value;
    }
  }

  /// <summary>Field number for the "skill_point32s" field.</summary>
  public const int SkillPoint32SFieldNumber = 28;
  private float skillPoint32S_;
  /// <summary>
  ///技能点
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float SkillPoint32S {
    get { return skillPoint32S_; }
    set {
      skillPoint32S_ = value;
    }
  }

  /// <summary>Field number for the "block_probability" field.</summary>
  public const int BlockProbabilityFieldNumber = 40;
  private int blockProbability_;
  /// <summary>
  /// int32 attack_int32ensity=29;//攻击强度值
  /// int32 breaking_strength=30;//击开强度值
  /// float repulsion_duration=31;//击退时长
  /// repeated float repulsion_distance=32;//击退距离
  /// float knock_down_duration=33;//击倒时长
  /// repeated float knock_down_distance=34;//击倒距离
  /// float breaking_duration=35;//击飞时长
  /// repeated float striking_distance=36;//击飞距离
  /// repeated float striking_direction=37;//击开方向
  /// int32 heterogeneous_level=38;//霸体级别值
  /// int32 resistance_level=39;//抗击级别值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int BlockProbability {
    get { return blockProbability_; }
    set {
      blockProbability_ = value;
    }
  }

  /// <summary>Field number for the "back_block_probability" field.</summary>
  public const int BackBlockProbabilityFieldNumber = 41;
  private int backBlockProbability_;
  /// <summary>
  ///后格挡率
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int BackBlockProbability {
    get { return backBlockProbability_; }
    set {
      backBlockProbability_ = value;
    }
  }

  /// <summary>Field number for the "dodge_probability" field.</summary>
  public const int DodgeProbabilityFieldNumber = 42;
  private int dodgeProbability_;
  /// <summary>
  ///躲闪率
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DodgeProbability {
    get { return dodgeProbability_; }
    set {
      dodgeProbability_ = value;
    }
  }

  /// <summary>Field number for the "counterattack_probability" field.</summary>
  public const int CounterattackProbabilityFieldNumber = 43;
  private int counterattackProbability_;
  /// <summary>
  ///反击率
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CounterattackProbability {
    get { return counterattackProbability_; }
    set {
      counterattackProbability_ = value;
    }
  }

  /// <summary>Field number for the "Power" field.</summary>
  public const int PowerFieldNumber = 44;
  private int power_;
  /// <summary>
  ///体力初始值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Power {
    get { return power_; }
    set {
      power_ = value;
    }
  }

  /// <summary>Field number for the "MaxPower" field.</summary>
  public const int MaxPowerFieldNumber = 45;
  private int maxPower_;
  /// <summary>
  ///体力最大值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int MaxPower {
    get { return maxPower_; }
    set {
      maxPower_ = value;
    }
  }

  /// <summary>Field number for the "StartTime" field.</summary>
  public const int StartTimeFieldNumber = 46;
  private float startTime_;
  /// <summary>
  ///保持X秒没有消耗体力后，开始恢复体力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  /// <summary>Field number for the "AddPowerSpeed" field.</summary>
  public const int AddPowerSpeedFieldNumber = 47;
  private float addPowerSpeed_;
  /// <summary>
  ///每隔多少秒恢复体力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float AddPowerSpeed {
    get { return addPowerSpeed_; }
    set {
      addPowerSpeed_ = value;
    }
  }

  /// <summary>Field number for the "AddPowerNum" field.</summary>
  public const int AddPowerNumFieldNumber = 48;
  private int addPowerNum_;
  /// <summary>
  ///恢复体力数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int AddPowerNum {
    get { return addPowerNum_; }
    set {
      addPowerNum_ = value;
    }
  }

  /// <summary>Field number for the "Anger" field.</summary>
  public const int AngerFieldNumber = 49;
  private float anger_;
  /// <summary>
  ///怒气初始值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Anger {
    get { return anger_; }
    set {
      anger_ = value;
    }
  }

  /// <summary>Field number for the "MaxAnger" field.</summary>
  public const int MaxAngerFieldNumber = 50;
  private float maxAnger_;
  /// <summary>
  ///怒气最大值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MaxAnger {
    get { return maxAnger_; }
    set {
      maxAnger_ = value;
    }
  }

  /// <summary>Field number for the "StartReduceAngerTime" field.</summary>
  public const int StartReduceAngerTimeFieldNumber = 51;
  private float startReduceAngerTime_;
  /// <summary>
  ///当X秒后没有造成伤害，开始慢慢消减
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float StartReduceAngerTime {
    get { return startReduceAngerTime_; }
    set {
      startReduceAngerTime_ = value;
    }
  }

  /// <summary>Field number for the "ReduceAngerTime" field.</summary>
  public const int ReduceAngerTimeFieldNumber = 52;
  private float reduceAngerTime_;
  /// <summary>
  ///消减时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float ReduceAngerTime {
    get { return reduceAngerTime_; }
    set {
      reduceAngerTime_ = value;
    }
  }

  /// <summary>Field number for the "ReduceAngerNum" field.</summary>
  public const int ReduceAngerNumFieldNumber = 53;
  private float reduceAngerNum_;
  /// <summary>
  ///消减数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float ReduceAngerNum {
    get { return reduceAngerNum_; }
    set {
      reduceAngerNum_ = value;
    }
  }

  /// <summary>Field number for the "QTENum" field.</summary>
  public const int QTENumFieldNumber = 54;
  private float qTENum_;
  /// <summary>
  ///处决敌人额外增加怒气值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float QTENum {
    get { return qTENum_; }
    set {
      qTENum_ = value;
    }
  }

  /// <summary>Field number for the "KillNum" field.</summary>
  public const int KillNumFieldNumber = 55;
  private float killNum_;
  /// <summary>
  ///击杀敌人增加的怒气值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float KillNum {
    get { return killNum_; }
    set {
      killNum_ = value;
    }
  }

  /// <summary>Field number for the "executionTotal" field.</summary>
  public const int ExecutionTotalFieldNumber = 56;
  private int executionTotal_;
  /// <summary>
  ///处决最大值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ExecutionTotal {
    get { return executionTotal_; }
    set {
      executionTotal_ = value;
    }
  }

  /// <summary>Field number for the "executionCutDown" field.</summary>
  public const int ExecutionCutDownFieldNumber = 57;
  private int executionCutDown_;
  /// <summary>
  ///处决衰减值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ExecutionCutDown {
    get { return executionCutDown_; }
    set {
      executionCutDown_ = value;
    }
  }

  /// <summary>Field number for the "anger_recovery_percent" field.</summary>
  public const int AngerRecoveryPercentFieldNumber = 58;
  private float angerRecoveryPercent_;
  /// <summary>
  ///怒气回复百分比加成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float AngerRecoveryPercent {
    get { return angerRecoveryPercent_; }
    set {
      angerRecoveryPercent_ = value;
    }
  }

  /// <summary>Field number for the "anger_reduce" field.</summary>
  public const int AngerReduceFieldNumber = 59;
  private float angerReduce_;
  /// <summary>
  ///怒气下降百分比加成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float AngerReduce {
    get { return angerReduce_; }
    set {
      angerReduce_ = value;
    }
  }

  /// <summary>Field number for the "stamina_recovery" field.</summary>
  public const int StaminaRecoveryFieldNumber = 60;
  private float staminaRecovery_;
  /// <summary>
  ///体力回复百分比加成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float StaminaRecovery {
    get { return staminaRecovery_; }
    set {
      staminaRecovery_ = value;
    }
  }

  /// <summary>Field number for the "move_speed_ex" field.</summary>
  public const int MoveSpeedExFieldNumber = 61;
  private float moveSpeedEx_;
  /// <summary>
  ///移动速度加成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MoveSpeedEx {
    get { return moveSpeedEx_; }
    set {
      moveSpeedEx_ = value;
    }
  }

  /// <summary>Field number for the "speed" field.</summary>
  public const int SpeedFieldNumber = 62;
  private float speed_;
  /// <summary>
  ///最大速度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Speed {
    get { return speed_; }
    set {
      speed_ = value;
    }
  }

  /// <summary>Field number for the "acceleration" field.</summary>
  public const int AccelerationFieldNumber = 63;
  private float acceleration_;
  /// <summary>
  ///加速度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Acceleration {
    get { return acceleration_; }
    set {
      acceleration_ = value;
    }
  }

  /// <summary>Field number for the "steering_speed" field.</summary>
  public const int SteeringSpeedFieldNumber = 64;
  private float steeringSpeed_;
  /// <summary>
  ///转向速度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float SteeringSpeed {
    get { return steeringSpeed_; }
    set {
      steeringSpeed_ = value;
    }
  }

  /// <summary>Field number for the "MaxElement" field.</summary>
  public const int MaxElementFieldNumber = 65;
  private float maxElement_;
  /// <summary>
  ///元素积累槽
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MaxElement {
    get { return maxElement_; }
    set {
      maxElement_ = value;
    }
  }

  /// <summary>Field number for the "StartReduceElementTime" field.</summary>
  public const int StartReduceElementTimeFieldNumber = 66;
  private float startReduceElementTime_;
  /// <summary>
  ///当X秒后没有造成伤害，开始慢慢消减
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float StartReduceElementTime {
    get { return startReduceElementTime_; }
    set {
      startReduceElementTime_ = value;
    }
  }

  /// <summary>Field number for the "ReduceElementTime" field.</summary>
  public const int ReduceElementTimeFieldNumber = 67;
  private float reduceElementTime_;
  /// <summary>
  ///元素积累槽消减时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float ReduceElementTime {
    get { return reduceElementTime_; }
    set {
      reduceElementTime_ = value;
    }
  }

  /// <summary>Field number for the "ReduceElementNum" field.</summary>
  public const int ReduceElementNumFieldNumber = 68;
  private float reduceElementNum_;
  /// <summary>
  ///元素积累槽消减数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float ReduceElementNum {
    get { return reduceElementNum_; }
    set {
      reduceElementNum_ = value;
    }
  }

  /// <summary>Field number for the "p_ex" field.</summary>
  public const int PExFieldNumber = 69;
  private float pEx_;
  /// <summary>
  ///主角获得经验加成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float PEx {
    get { return pEx_; }
    set {
      pEx_ = value;
    }
  }

  /// <summary>Field number for the "h_ex" field.</summary>
  public const int HExFieldNumber = 70;
  private float hEx_;
  /// <summary>
  ///战马获得经验加成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float HEx {
    get { return hEx_; }
    set {
      hEx_ = value;
    }
  }

  /// <summary>Field number for the "t_ex" field.</summary>
  public const int TExFieldNumber = 71;
  private float tEx_;
  /// <summary>
  ///伙伴获得经验加成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float TEx {
    get { return tEx_; }
    set {
      tEx_ = value;
    }
  }

  /// <summary>Field number for the "coin_ex" field.</summary>
  public const int CoinExFieldNumber = 72;
  private float coinEx_;
  /// <summary>
  ///铜钱获得加成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float CoinEx {
    get { return coinEx_; }
    set {
      coinEx_ = value;
    }
  }

  /// <summary>Field number for the "skillcd" field.</summary>
  public const int SkillcdFieldNumber = 73;
  private float skillcd_;
  /// <summary>
  ///技能急速
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Skillcd {
    get { return skillcd_; }
    set {
      skillcd_ = value;
    }
  }

  /// <summary>Field number for the "pierce_through_def" field.</summary>
  public const int PierceThroughDefFieldNumber = 74;
  private float pierceThroughDef_;
  /// <summary>
  ///透防概率
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float PierceThroughDef {
    get { return pierceThroughDef_; }
    set {
      pierceThroughDef_ = value;
    }
  }

  /// <summary>Field number for the "breaking_pro" field.</summary>
  public const int BreakingProFieldNumber = 75;
  private float breakingPro_;
  /// <summary>
  ///破防比例
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float BreakingPro {
    get { return breakingPro_; }
    set {
      breakingPro_ = value;
    }
  }

  /// <summary>Field number for the "breaking_1" field.</summary>
  public const int Breaking1FieldNumber = 76;
  private float breaking1_;
  /// <summary>
  ///破兵
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Breaking1 {
    get { return breaking1_; }
    set {
      breaking1_ = value;
    }
  }

  /// <summary>Field number for the "breaking_2" field.</summary>
  public const int Breaking2FieldNumber = 77;
  private float breaking2_;
  /// <summary>
  ///破酋
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Breaking2 {
    get { return breaking2_; }
    set {
      breaking2_ = value;
    }
  }

  /// <summary>Field number for the "breaking_3" field.</summary>
  public const int Breaking3FieldNumber = 78;
  private float breaking3_;
  /// <summary>
  ///破帅
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Breaking3 {
    get { return breaking3_; }
    set {
      breaking3_ = value;
    }
  }

  /// <summary>Field number for the "small_damage" field.</summary>
  public const int SmallDamageFieldNumber = 79;
  private float smallDamage_;
  /// <summary>
  ///轻甲伤害
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float SmallDamage {
    get { return smallDamage_; }
    set {
      smallDamage_ = value;
    }
  }

  /// <summary>Field number for the "middle_damage" field.</summary>
  public const int MiddleDamageFieldNumber = 80;
  private float middleDamage_;
  /// <summary>
  ///中甲伤害
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float MiddleDamage {
    get { return middleDamage_; }
    set {
      middleDamage_ = value;
    }
  }

  /// <summary>Field number for the "big_damage" field.</summary>
  public const int BigDamageFieldNumber = 81;
  private float bigDamage_;
  /// <summary>
  ///重甲伤害
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float BigDamage {
    get { return bigDamage_; }
    set {
      bigDamage_ = value;
    }
  }

  /// <summary>Field number for the "fixed_reduction" field.</summary>
  public const int FixedReductionFieldNumber = 82;
  private float fixedReduction_;
  /// <summary>
  ///固定减伤
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float FixedReduction {
    get { return fixedReduction_; }
    set {
      fixedReduction_ = value;
    }
  }

  /// <summary>Field number for the "physics_reduction" field.</summary>
  public const int PhysicsReductionFieldNumber = 83;
  private float physicsReduction_;
  /// <summary>
  ///物理减伤
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float PhysicsReduction {
    get { return physicsReduction_; }
    set {
      physicsReduction_ = value;
    }
  }

  /// <summary>Field number for the "anti_riot" field.</summary>
  public const int AntiRiotFieldNumber = 84;
  private float antiRiot_;
  /// <summary>
  ///抗暴几率
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float AntiRiot {
    get { return antiRiot_; }
    set {
      antiRiot_ = value;
    }
  }

  /// <summary>Field number for the "crit_reduction" field.</summary>
  public const int CritReductionFieldNumber = 85;
  private float critReduction_;
  /// <summary>
  ///暴击减伤
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float CritReduction {
    get { return critReduction_; }
    set {
      critReduction_ = value;
    }
  }

  /// <summary>Field number for the "def_1" field.</summary>
  public const int Def1FieldNumber = 86;
  private float def1_;
  /// <summary>
  ///防兵
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Def1 {
    get { return def1_; }
    set {
      def1_ = value;
    }
  }

  /// <summary>Field number for the "def_2" field.</summary>
  public const int Def2FieldNumber = 87;
  private float def2_;
  /// <summary>
  ///防酋
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Def2 {
    get { return def2_; }
    set {
      def2_ = value;
    }
  }

  /// <summary>Field number for the "def_3" field.</summary>
  public const int Def3FieldNumber = 88;
  private float def3_;
  /// <summary>
  ///防帅
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Def3 {
    get { return def3_; }
    set {
      def3_ = value;
    }
  }

  /// <summary>Field number for the "dur_equ" field.</summary>
  public const int DurEquFieldNumber = 89;
  private float durEqu_;
  /// <summary>
  ///耐久
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DurEqu {
    get { return durEqu_; }
    set {
      durEqu_ = value;
    }
  }

  /// <summary>Field number for the "CDR" field.</summary>
  public const int CDRFieldNumber = 90;
  private int cDR_;
  /// <summary>
  ///技能急速
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CDR {
    get { return cDR_; }
    set {
      cDR_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as UnitAttributeEntity);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(UnitAttributeEntity other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ID != other.ID) return false;
    if (Type != other.Type) return false;
    if (Lv != other.Lv) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Attack, other.Attack)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Breaking, other.Breaking)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Hp, other.Hp)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Defense, other.Defense)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackSpeed, other.AttackSpeed)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Resume, other.Resume)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IceAtk, other.IceAtk)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FlameAtk, other.FlameAtk)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LightningAtk, other.LightningAtk)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ToxicAtk, other.ToxicAtk)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IceResistance, other.IceResistance)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FlameResistance, other.FlameResistance)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LightningResistance, other.LightningResistance)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ToxicResistance, other.ToxicResistance)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FearResistance, other.FearResistance)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PhysicalResistance, other.PhysicalResistance)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitRate, other.HitRate)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Evade, other.Evade)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CriticalHitRate, other.CriticalHitRate)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CriticalHitRatio, other.CriticalHitRatio)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IncreaseInjury, other.IncreaseInjury)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InjuryReduction, other.InjuryReduction)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UpgradeExp, other.UpgradeExp)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ProductionExp, other.ProductionExp)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkillPoint32S, other.SkillPoint32S)) return false;
    if (BlockProbability != other.BlockProbability) return false;
    if (BackBlockProbability != other.BackBlockProbability) return false;
    if (DodgeProbability != other.DodgeProbability) return false;
    if (CounterattackProbability != other.CounterattackProbability) return false;
    if (Power != other.Power) return false;
    if (MaxPower != other.MaxPower) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartTime, other.StartTime)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AddPowerSpeed, other.AddPowerSpeed)) return false;
    if (AddPowerNum != other.AddPowerNum) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Anger, other.Anger)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxAnger, other.MaxAnger)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartReduceAngerTime, other.StartReduceAngerTime)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReduceAngerTime, other.ReduceAngerTime)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReduceAngerNum, other.ReduceAngerNum)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(QTENum, other.QTENum)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(KillNum, other.KillNum)) return false;
    if (ExecutionTotal != other.ExecutionTotal) return false;
    if (ExecutionCutDown != other.ExecutionCutDown) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngerRecoveryPercent, other.AngerRecoveryPercent)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngerReduce, other.AngerReduce)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StaminaRecovery, other.StaminaRecovery)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveSpeedEx, other.MoveSpeedEx)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Acceleration, other.Acceleration)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SteeringSpeed, other.SteeringSpeed)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxElement, other.MaxElement)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartReduceElementTime, other.StartReduceElementTime)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReduceElementTime, other.ReduceElementTime)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReduceElementNum, other.ReduceElementNum)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PEx, other.PEx)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HEx, other.HEx)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TEx, other.TEx)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CoinEx, other.CoinEx)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Skillcd, other.Skillcd)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PierceThroughDef, other.PierceThroughDef)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BreakingPro, other.BreakingPro)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Breaking1, other.Breaking1)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Breaking2, other.Breaking2)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Breaking3, other.Breaking3)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SmallDamage, other.SmallDamage)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MiddleDamage, other.MiddleDamage)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BigDamage, other.BigDamage)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FixedReduction, other.FixedReduction)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PhysicsReduction, other.PhysicsReduction)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AntiRiot, other.AntiRiot)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CritReduction, other.CritReduction)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Def1, other.Def1)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Def2, other.Def2)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Def3, other.Def3)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DurEqu, other.DurEqu)) return false;
    if (CDR != other.CDR) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (ID != 0) hash ^= ID.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Lv != 0) hash ^= Lv.GetHashCode();
    if (Attack != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Attack);
    if (Breaking != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Breaking);
    if (Hp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Hp);
    if (Defense != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Defense);
    if (AttackSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackSpeed);
    if (Resume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Resume);
    if (IceAtk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IceAtk);
    if (FlameAtk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FlameAtk);
    if (LightningAtk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LightningAtk);
    if (ToxicAtk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ToxicAtk);
    if (IceResistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IceResistance);
    if (FlameResistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FlameResistance);
    if (LightningResistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LightningResistance);
    if (ToxicResistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ToxicResistance);
    if (FearResistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FearResistance);
    if (PhysicalResistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PhysicalResistance);
    if (HitRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitRate);
    if (Evade != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Evade);
    if (CriticalHitRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CriticalHitRate);
    if (CriticalHitRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CriticalHitRatio);
    if (IncreaseInjury != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IncreaseInjury);
    if (InjuryReduction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InjuryReduction);
    if (UpgradeExp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UpgradeExp);
    if (ProductionExp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ProductionExp);
    if (SkillPoint32S != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkillPoint32S);
    if (BlockProbability != 0) hash ^= BlockProbability.GetHashCode();
    if (BackBlockProbability != 0) hash ^= BackBlockProbability.GetHashCode();
    if (DodgeProbability != 0) hash ^= DodgeProbability.GetHashCode();
    if (CounterattackProbability != 0) hash ^= CounterattackProbability.GetHashCode();
    if (Power != 0) hash ^= Power.GetHashCode();
    if (MaxPower != 0) hash ^= MaxPower.GetHashCode();
    if (StartTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartTime);
    if (AddPowerSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AddPowerSpeed);
    if (AddPowerNum != 0) hash ^= AddPowerNum.GetHashCode();
    if (Anger != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Anger);
    if (MaxAnger != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxAnger);
    if (StartReduceAngerTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartReduceAngerTime);
    if (ReduceAngerTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReduceAngerTime);
    if (ReduceAngerNum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReduceAngerNum);
    if (QTENum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(QTENum);
    if (KillNum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(KillNum);
    if (ExecutionTotal != 0) hash ^= ExecutionTotal.GetHashCode();
    if (ExecutionCutDown != 0) hash ^= ExecutionCutDown.GetHashCode();
    if (AngerRecoveryPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngerRecoveryPercent);
    if (AngerReduce != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngerReduce);
    if (StaminaRecovery != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StaminaRecovery);
    if (MoveSpeedEx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveSpeedEx);
    if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
    if (Acceleration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Acceleration);
    if (SteeringSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SteeringSpeed);
    if (MaxElement != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxElement);
    if (StartReduceElementTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartReduceElementTime);
    if (ReduceElementTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReduceElementTime);
    if (ReduceElementNum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReduceElementNum);
    if (PEx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PEx);
    if (HEx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HEx);
    if (TEx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TEx);
    if (CoinEx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CoinEx);
    if (Skillcd != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Skillcd);
    if (PierceThroughDef != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PierceThroughDef);
    if (BreakingPro != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BreakingPro);
    if (Breaking1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Breaking1);
    if (Breaking2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Breaking2);
    if (Breaking3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Breaking3);
    if (SmallDamage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SmallDamage);
    if (MiddleDamage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MiddleDamage);
    if (BigDamage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BigDamage);
    if (FixedReduction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FixedReduction);
    if (PhysicsReduction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PhysicsReduction);
    if (AntiRiot != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AntiRiot);
    if (CritReduction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CritReduction);
    if (Def1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Def1);
    if (Def2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Def2);
    if (Def3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Def3);
    if (DurEqu != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DurEqu);
    if (CDR != 0) hash ^= CDR.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (ID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ID);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (Lv != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Lv);
    }
    if (Attack != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Attack);
    }
    if (Breaking != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Breaking);
    }
    if (Hp != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(Hp);
    }
    if (Defense != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(Defense);
    }
    if (AttackSpeed != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(AttackSpeed);
    }
    if (Resume != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(Resume);
    }
    if (IceAtk != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(IceAtk);
    }
    if (FlameAtk != 0F) {
      output.WriteRawTag(93);
      output.WriteFloat(FlameAtk);
    }
    if (LightningAtk != 0F) {
      output.WriteRawTag(101);
      output.WriteFloat(LightningAtk);
    }
    if (ToxicAtk != 0F) {
      output.WriteRawTag(109);
      output.WriteFloat(ToxicAtk);
    }
    if (IceResistance != 0F) {
      output.WriteRawTag(117);
      output.WriteFloat(IceResistance);
    }
    if (FlameResistance != 0F) {
      output.WriteRawTag(125);
      output.WriteFloat(FlameResistance);
    }
    if (LightningResistance != 0F) {
      output.WriteRawTag(133, 1);
      output.WriteFloat(LightningResistance);
    }
    if (ToxicResistance != 0F) {
      output.WriteRawTag(141, 1);
      output.WriteFloat(ToxicResistance);
    }
    if (FearResistance != 0F) {
      output.WriteRawTag(149, 1);
      output.WriteFloat(FearResistance);
    }
    if (PhysicalResistance != 0F) {
      output.WriteRawTag(157, 1);
      output.WriteFloat(PhysicalResistance);
    }
    if (HitRate != 0F) {
      output.WriteRawTag(165, 1);
      output.WriteFloat(HitRate);
    }
    if (Evade != 0F) {
      output.WriteRawTag(173, 1);
      output.WriteFloat(Evade);
    }
    if (CriticalHitRate != 0F) {
      output.WriteRawTag(181, 1);
      output.WriteFloat(CriticalHitRate);
    }
    if (CriticalHitRatio != 0F) {
      output.WriteRawTag(189, 1);
      output.WriteFloat(CriticalHitRatio);
    }
    if (IncreaseInjury != 0F) {
      output.WriteRawTag(197, 1);
      output.WriteFloat(IncreaseInjury);
    }
    if (InjuryReduction != 0F) {
      output.WriteRawTag(205, 1);
      output.WriteFloat(InjuryReduction);
    }
    if (UpgradeExp != 0F) {
      output.WriteRawTag(213, 1);
      output.WriteFloat(UpgradeExp);
    }
    if (ProductionExp != 0F) {
      output.WriteRawTag(221, 1);
      output.WriteFloat(ProductionExp);
    }
    if (SkillPoint32S != 0F) {
      output.WriteRawTag(229, 1);
      output.WriteFloat(SkillPoint32S);
    }
    if (BlockProbability != 0) {
      output.WriteRawTag(192, 2);
      output.WriteInt32(BlockProbability);
    }
    if (BackBlockProbability != 0) {
      output.WriteRawTag(200, 2);
      output.WriteInt32(BackBlockProbability);
    }
    if (DodgeProbability != 0) {
      output.WriteRawTag(208, 2);
      output.WriteInt32(DodgeProbability);
    }
    if (CounterattackProbability != 0) {
      output.WriteRawTag(216, 2);
      output.WriteInt32(CounterattackProbability);
    }
    if (Power != 0) {
      output.WriteRawTag(224, 2);
      output.WriteInt32(Power);
    }
    if (MaxPower != 0) {
      output.WriteRawTag(232, 2);
      output.WriteInt32(MaxPower);
    }
    if (StartTime != 0F) {
      output.WriteRawTag(245, 2);
      output.WriteFloat(StartTime);
    }
    if (AddPowerSpeed != 0F) {
      output.WriteRawTag(253, 2);
      output.WriteFloat(AddPowerSpeed);
    }
    if (AddPowerNum != 0) {
      output.WriteRawTag(128, 3);
      output.WriteInt32(AddPowerNum);
    }
    if (Anger != 0F) {
      output.WriteRawTag(141, 3);
      output.WriteFloat(Anger);
    }
    if (MaxAnger != 0F) {
      output.WriteRawTag(149, 3);
      output.WriteFloat(MaxAnger);
    }
    if (StartReduceAngerTime != 0F) {
      output.WriteRawTag(157, 3);
      output.WriteFloat(StartReduceAngerTime);
    }
    if (ReduceAngerTime != 0F) {
      output.WriteRawTag(165, 3);
      output.WriteFloat(ReduceAngerTime);
    }
    if (ReduceAngerNum != 0F) {
      output.WriteRawTag(173, 3);
      output.WriteFloat(ReduceAngerNum);
    }
    if (QTENum != 0F) {
      output.WriteRawTag(181, 3);
      output.WriteFloat(QTENum);
    }
    if (KillNum != 0F) {
      output.WriteRawTag(189, 3);
      output.WriteFloat(KillNum);
    }
    if (ExecutionTotal != 0) {
      output.WriteRawTag(192, 3);
      output.WriteInt32(ExecutionTotal);
    }
    if (ExecutionCutDown != 0) {
      output.WriteRawTag(200, 3);
      output.WriteInt32(ExecutionCutDown);
    }
    if (AngerRecoveryPercent != 0F) {
      output.WriteRawTag(213, 3);
      output.WriteFloat(AngerRecoveryPercent);
    }
    if (AngerReduce != 0F) {
      output.WriteRawTag(221, 3);
      output.WriteFloat(AngerReduce);
    }
    if (StaminaRecovery != 0F) {
      output.WriteRawTag(229, 3);
      output.WriteFloat(StaminaRecovery);
    }
    if (MoveSpeedEx != 0F) {
      output.WriteRawTag(237, 3);
      output.WriteFloat(MoveSpeedEx);
    }
    if (Speed != 0F) {
      output.WriteRawTag(245, 3);
      output.WriteFloat(Speed);
    }
    if (Acceleration != 0F) {
      output.WriteRawTag(253, 3);
      output.WriteFloat(Acceleration);
    }
    if (SteeringSpeed != 0F) {
      output.WriteRawTag(133, 4);
      output.WriteFloat(SteeringSpeed);
    }
    if (MaxElement != 0F) {
      output.WriteRawTag(141, 4);
      output.WriteFloat(MaxElement);
    }
    if (StartReduceElementTime != 0F) {
      output.WriteRawTag(149, 4);
      output.WriteFloat(StartReduceElementTime);
    }
    if (ReduceElementTime != 0F) {
      output.WriteRawTag(157, 4);
      output.WriteFloat(ReduceElementTime);
    }
    if (ReduceElementNum != 0F) {
      output.WriteRawTag(165, 4);
      output.WriteFloat(ReduceElementNum);
    }
    if (PEx != 0F) {
      output.WriteRawTag(173, 4);
      output.WriteFloat(PEx);
    }
    if (HEx != 0F) {
      output.WriteRawTag(181, 4);
      output.WriteFloat(HEx);
    }
    if (TEx != 0F) {
      output.WriteRawTag(189, 4);
      output.WriteFloat(TEx);
    }
    if (CoinEx != 0F) {
      output.WriteRawTag(197, 4);
      output.WriteFloat(CoinEx);
    }
    if (Skillcd != 0F) {
      output.WriteRawTag(205, 4);
      output.WriteFloat(Skillcd);
    }
    if (PierceThroughDef != 0F) {
      output.WriteRawTag(213, 4);
      output.WriteFloat(PierceThroughDef);
    }
    if (BreakingPro != 0F) {
      output.WriteRawTag(221, 4);
      output.WriteFloat(BreakingPro);
    }
    if (Breaking1 != 0F) {
      output.WriteRawTag(229, 4);
      output.WriteFloat(Breaking1);
    }
    if (Breaking2 != 0F) {
      output.WriteRawTag(237, 4);
      output.WriteFloat(Breaking2);
    }
    if (Breaking3 != 0F) {
      output.WriteRawTag(245, 4);
      output.WriteFloat(Breaking3);
    }
    if (SmallDamage != 0F) {
      output.WriteRawTag(253, 4);
      output.WriteFloat(SmallDamage);
    }
    if (MiddleDamage != 0F) {
      output.WriteRawTag(133, 5);
      output.WriteFloat(MiddleDamage);
    }
    if (BigDamage != 0F) {
      output.WriteRawTag(141, 5);
      output.WriteFloat(BigDamage);
    }
    if (FixedReduction != 0F) {
      output.WriteRawTag(149, 5);
      output.WriteFloat(FixedReduction);
    }
    if (PhysicsReduction != 0F) {
      output.WriteRawTag(157, 5);
      output.WriteFloat(PhysicsReduction);
    }
    if (AntiRiot != 0F) {
      output.WriteRawTag(165, 5);
      output.WriteFloat(AntiRiot);
    }
    if (CritReduction != 0F) {
      output.WriteRawTag(173, 5);
      output.WriteFloat(CritReduction);
    }
    if (Def1 != 0F) {
      output.WriteRawTag(181, 5);
      output.WriteFloat(Def1);
    }
    if (Def2 != 0F) {
      output.WriteRawTag(189, 5);
      output.WriteFloat(Def2);
    }
    if (Def3 != 0F) {
      output.WriteRawTag(197, 5);
      output.WriteFloat(Def3);
    }
    if (DurEqu != 0F) {
      output.WriteRawTag(205, 5);
      output.WriteFloat(DurEqu);
    }
    if (CDR != 0) {
      output.WriteRawTag(208, 5);
      output.WriteInt32(CDR);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (ID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ID);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (Lv != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Lv);
    }
    if (Attack != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Attack);
    }
    if (Breaking != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Breaking);
    }
    if (Hp != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(Hp);
    }
    if (Defense != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(Defense);
    }
    if (AttackSpeed != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(AttackSpeed);
    }
    if (Resume != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(Resume);
    }
    if (IceAtk != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(IceAtk);
    }
    if (FlameAtk != 0F) {
      output.WriteRawTag(93);
      output.WriteFloat(FlameAtk);
    }
    if (LightningAtk != 0F) {
      output.WriteRawTag(101);
      output.WriteFloat(LightningAtk);
    }
    if (ToxicAtk != 0F) {
      output.WriteRawTag(109);
      output.WriteFloat(ToxicAtk);
    }
    if (IceResistance != 0F) {
      output.WriteRawTag(117);
      output.WriteFloat(IceResistance);
    }
    if (FlameResistance != 0F) {
      output.WriteRawTag(125);
      output.WriteFloat(FlameResistance);
    }
    if (LightningResistance != 0F) {
      output.WriteRawTag(133, 1);
      output.WriteFloat(LightningResistance);
    }
    if (ToxicResistance != 0F) {
      output.WriteRawTag(141, 1);
      output.WriteFloat(ToxicResistance);
    }
    if (FearResistance != 0F) {
      output.WriteRawTag(149, 1);
      output.WriteFloat(FearResistance);
    }
    if (PhysicalResistance != 0F) {
      output.WriteRawTag(157, 1);
      output.WriteFloat(PhysicalResistance);
    }
    if (HitRate != 0F) {
      output.WriteRawTag(165, 1);
      output.WriteFloat(HitRate);
    }
    if (Evade != 0F) {
      output.WriteRawTag(173, 1);
      output.WriteFloat(Evade);
    }
    if (CriticalHitRate != 0F) {
      output.WriteRawTag(181, 1);
      output.WriteFloat(CriticalHitRate);
    }
    if (CriticalHitRatio != 0F) {
      output.WriteRawTag(189, 1);
      output.WriteFloat(CriticalHitRatio);
    }
    if (IncreaseInjury != 0F) {
      output.WriteRawTag(197, 1);
      output.WriteFloat(IncreaseInjury);
    }
    if (InjuryReduction != 0F) {
      output.WriteRawTag(205, 1);
      output.WriteFloat(InjuryReduction);
    }
    if (UpgradeExp != 0F) {
      output.WriteRawTag(213, 1);
      output.WriteFloat(UpgradeExp);
    }
    if (ProductionExp != 0F) {
      output.WriteRawTag(221, 1);
      output.WriteFloat(ProductionExp);
    }
    if (SkillPoint32S != 0F) {
      output.WriteRawTag(229, 1);
      output.WriteFloat(SkillPoint32S);
    }
    if (BlockProbability != 0) {
      output.WriteRawTag(192, 2);
      output.WriteInt32(BlockProbability);
    }
    if (BackBlockProbability != 0) {
      output.WriteRawTag(200, 2);
      output.WriteInt32(BackBlockProbability);
    }
    if (DodgeProbability != 0) {
      output.WriteRawTag(208, 2);
      output.WriteInt32(DodgeProbability);
    }
    if (CounterattackProbability != 0) {
      output.WriteRawTag(216, 2);
      output.WriteInt32(CounterattackProbability);
    }
    if (Power != 0) {
      output.WriteRawTag(224, 2);
      output.WriteInt32(Power);
    }
    if (MaxPower != 0) {
      output.WriteRawTag(232, 2);
      output.WriteInt32(MaxPower);
    }
    if (StartTime != 0F) {
      output.WriteRawTag(245, 2);
      output.WriteFloat(StartTime);
    }
    if (AddPowerSpeed != 0F) {
      output.WriteRawTag(253, 2);
      output.WriteFloat(AddPowerSpeed);
    }
    if (AddPowerNum != 0) {
      output.WriteRawTag(128, 3);
      output.WriteInt32(AddPowerNum);
    }
    if (Anger != 0F) {
      output.WriteRawTag(141, 3);
      output.WriteFloat(Anger);
    }
    if (MaxAnger != 0F) {
      output.WriteRawTag(149, 3);
      output.WriteFloat(MaxAnger);
    }
    if (StartReduceAngerTime != 0F) {
      output.WriteRawTag(157, 3);
      output.WriteFloat(StartReduceAngerTime);
    }
    if (ReduceAngerTime != 0F) {
      output.WriteRawTag(165, 3);
      output.WriteFloat(ReduceAngerTime);
    }
    if (ReduceAngerNum != 0F) {
      output.WriteRawTag(173, 3);
      output.WriteFloat(ReduceAngerNum);
    }
    if (QTENum != 0F) {
      output.WriteRawTag(181, 3);
      output.WriteFloat(QTENum);
    }
    if (KillNum != 0F) {
      output.WriteRawTag(189, 3);
      output.WriteFloat(KillNum);
    }
    if (ExecutionTotal != 0) {
      output.WriteRawTag(192, 3);
      output.WriteInt32(ExecutionTotal);
    }
    if (ExecutionCutDown != 0) {
      output.WriteRawTag(200, 3);
      output.WriteInt32(ExecutionCutDown);
    }
    if (AngerRecoveryPercent != 0F) {
      output.WriteRawTag(213, 3);
      output.WriteFloat(AngerRecoveryPercent);
    }
    if (AngerReduce != 0F) {
      output.WriteRawTag(221, 3);
      output.WriteFloat(AngerReduce);
    }
    if (StaminaRecovery != 0F) {
      output.WriteRawTag(229, 3);
      output.WriteFloat(StaminaRecovery);
    }
    if (MoveSpeedEx != 0F) {
      output.WriteRawTag(237, 3);
      output.WriteFloat(MoveSpeedEx);
    }
    if (Speed != 0F) {
      output.WriteRawTag(245, 3);
      output.WriteFloat(Speed);
    }
    if (Acceleration != 0F) {
      output.WriteRawTag(253, 3);
      output.WriteFloat(Acceleration);
    }
    if (SteeringSpeed != 0F) {
      output.WriteRawTag(133, 4);
      output.WriteFloat(SteeringSpeed);
    }
    if (MaxElement != 0F) {
      output.WriteRawTag(141, 4);
      output.WriteFloat(MaxElement);
    }
    if (StartReduceElementTime != 0F) {
      output.WriteRawTag(149, 4);
      output.WriteFloat(StartReduceElementTime);
    }
    if (ReduceElementTime != 0F) {
      output.WriteRawTag(157, 4);
      output.WriteFloat(ReduceElementTime);
    }
    if (ReduceElementNum != 0F) {
      output.WriteRawTag(165, 4);
      output.WriteFloat(ReduceElementNum);
    }
    if (PEx != 0F) {
      output.WriteRawTag(173, 4);
      output.WriteFloat(PEx);
    }
    if (HEx != 0F) {
      output.WriteRawTag(181, 4);
      output.WriteFloat(HEx);
    }
    if (TEx != 0F) {
      output.WriteRawTag(189, 4);
      output.WriteFloat(TEx);
    }
    if (CoinEx != 0F) {
      output.WriteRawTag(197, 4);
      output.WriteFloat(CoinEx);
    }
    if (Skillcd != 0F) {
      output.WriteRawTag(205, 4);
      output.WriteFloat(Skillcd);
    }
    if (PierceThroughDef != 0F) {
      output.WriteRawTag(213, 4);
      output.WriteFloat(PierceThroughDef);
    }
    if (BreakingPro != 0F) {
      output.WriteRawTag(221, 4);
      output.WriteFloat(BreakingPro);
    }
    if (Breaking1 != 0F) {
      output.WriteRawTag(229, 4);
      output.WriteFloat(Breaking1);
    }
    if (Breaking2 != 0F) {
      output.WriteRawTag(237, 4);
      output.WriteFloat(Breaking2);
    }
    if (Breaking3 != 0F) {
      output.WriteRawTag(245, 4);
      output.WriteFloat(Breaking3);
    }
    if (SmallDamage != 0F) {
      output.WriteRawTag(253, 4);
      output.WriteFloat(SmallDamage);
    }
    if (MiddleDamage != 0F) {
      output.WriteRawTag(133, 5);
      output.WriteFloat(MiddleDamage);
    }
    if (BigDamage != 0F) {
      output.WriteRawTag(141, 5);
      output.WriteFloat(BigDamage);
    }
    if (FixedReduction != 0F) {
      output.WriteRawTag(149, 5);
      output.WriteFloat(FixedReduction);
    }
    if (PhysicsReduction != 0F) {
      output.WriteRawTag(157, 5);
      output.WriteFloat(PhysicsReduction);
    }
    if (AntiRiot != 0F) {
      output.WriteRawTag(165, 5);
      output.WriteFloat(AntiRiot);
    }
    if (CritReduction != 0F) {
      output.WriteRawTag(173, 5);
      output.WriteFloat(CritReduction);
    }
    if (Def1 != 0F) {
      output.WriteRawTag(181, 5);
      output.WriteFloat(Def1);
    }
    if (Def2 != 0F) {
      output.WriteRawTag(189, 5);
      output.WriteFloat(Def2);
    }
    if (Def3 != 0F) {
      output.WriteRawTag(197, 5);
      output.WriteFloat(Def3);
    }
    if (DurEqu != 0F) {
      output.WriteRawTag(205, 5);
      output.WriteFloat(DurEqu);
    }
    if (CDR != 0) {
      output.WriteRawTag(208, 5);
      output.WriteInt32(CDR);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (ID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Lv != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
    }
    if (Attack != 0F) {
      size += 1 + 4;
    }
    if (Breaking != 0F) {
      size += 1 + 4;
    }
    if (Hp != 0F) {
      size += 1 + 4;
    }
    if (Defense != 0F) {
      size += 1 + 4;
    }
    if (AttackSpeed != 0F) {
      size += 1 + 4;
    }
    if (Resume != 0F) {
      size += 1 + 4;
    }
    if (IceAtk != 0F) {
      size += 1 + 4;
    }
    if (FlameAtk != 0F) {
      size += 1 + 4;
    }
    if (LightningAtk != 0F) {
      size += 1 + 4;
    }
    if (ToxicAtk != 0F) {
      size += 1 + 4;
    }
    if (IceResistance != 0F) {
      size += 1 + 4;
    }
    if (FlameResistance != 0F) {
      size += 1 + 4;
    }
    if (LightningResistance != 0F) {
      size += 2 + 4;
    }
    if (ToxicResistance != 0F) {
      size += 2 + 4;
    }
    if (FearResistance != 0F) {
      size += 2 + 4;
    }
    if (PhysicalResistance != 0F) {
      size += 2 + 4;
    }
    if (HitRate != 0F) {
      size += 2 + 4;
    }
    if (Evade != 0F) {
      size += 2 + 4;
    }
    if (CriticalHitRate != 0F) {
      size += 2 + 4;
    }
    if (CriticalHitRatio != 0F) {
      size += 2 + 4;
    }
    if (IncreaseInjury != 0F) {
      size += 2 + 4;
    }
    if (InjuryReduction != 0F) {
      size += 2 + 4;
    }
    if (UpgradeExp != 0F) {
      size += 2 + 4;
    }
    if (ProductionExp != 0F) {
      size += 2 + 4;
    }
    if (SkillPoint32S != 0F) {
      size += 2 + 4;
    }
    if (BlockProbability != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(BlockProbability);
    }
    if (BackBlockProbability != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(BackBlockProbability);
    }
    if (DodgeProbability != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DodgeProbability);
    }
    if (CounterattackProbability != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(CounterattackProbability);
    }
    if (Power != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Power);
    }
    if (MaxPower != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxPower);
    }
    if (StartTime != 0F) {
      size += 2 + 4;
    }
    if (AddPowerSpeed != 0F) {
      size += 2 + 4;
    }
    if (AddPowerNum != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(AddPowerNum);
    }
    if (Anger != 0F) {
      size += 2 + 4;
    }
    if (MaxAnger != 0F) {
      size += 2 + 4;
    }
    if (StartReduceAngerTime != 0F) {
      size += 2 + 4;
    }
    if (ReduceAngerTime != 0F) {
      size += 2 + 4;
    }
    if (ReduceAngerNum != 0F) {
      size += 2 + 4;
    }
    if (QTENum != 0F) {
      size += 2 + 4;
    }
    if (KillNum != 0F) {
      size += 2 + 4;
    }
    if (ExecutionTotal != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExecutionTotal);
    }
    if (ExecutionCutDown != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExecutionCutDown);
    }
    if (AngerRecoveryPercent != 0F) {
      size += 2 + 4;
    }
    if (AngerReduce != 0F) {
      size += 2 + 4;
    }
    if (StaminaRecovery != 0F) {
      size += 2 + 4;
    }
    if (MoveSpeedEx != 0F) {
      size += 2 + 4;
    }
    if (Speed != 0F) {
      size += 2 + 4;
    }
    if (Acceleration != 0F) {
      size += 2 + 4;
    }
    if (SteeringSpeed != 0F) {
      size += 2 + 4;
    }
    if (MaxElement != 0F) {
      size += 2 + 4;
    }
    if (StartReduceElementTime != 0F) {
      size += 2 + 4;
    }
    if (ReduceElementTime != 0F) {
      size += 2 + 4;
    }
    if (ReduceElementNum != 0F) {
      size += 2 + 4;
    }
    if (PEx != 0F) {
      size += 2 + 4;
    }
    if (HEx != 0F) {
      size += 2 + 4;
    }
    if (TEx != 0F) {
      size += 2 + 4;
    }
    if (CoinEx != 0F) {
      size += 2 + 4;
    }
    if (Skillcd != 0F) {
      size += 2 + 4;
    }
    if (PierceThroughDef != 0F) {
      size += 2 + 4;
    }
    if (BreakingPro != 0F) {
      size += 2 + 4;
    }
    if (Breaking1 != 0F) {
      size += 2 + 4;
    }
    if (Breaking2 != 0F) {
      size += 2 + 4;
    }
    if (Breaking3 != 0F) {
      size += 2 + 4;
    }
    if (SmallDamage != 0F) {
      size += 2 + 4;
    }
    if (MiddleDamage != 0F) {
      size += 2 + 4;
    }
    if (BigDamage != 0F) {
      size += 2 + 4;
    }
    if (FixedReduction != 0F) {
      size += 2 + 4;
    }
    if (PhysicsReduction != 0F) {
      size += 2 + 4;
    }
    if (AntiRiot != 0F) {
      size += 2 + 4;
    }
    if (CritReduction != 0F) {
      size += 2 + 4;
    }
    if (Def1 != 0F) {
      size += 2 + 4;
    }
    if (Def2 != 0F) {
      size += 2 + 4;
    }
    if (Def3 != 0F) {
      size += 2 + 4;
    }
    if (DurEqu != 0F) {
      size += 2 + 4;
    }
    if (CDR != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(CDR);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(UnitAttributeEntity other) {
    if (other == null) {
      return;
    }
    if (other.ID != 0) {
      ID = other.ID;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Lv != 0) {
      Lv = other.Lv;
    }
    if (other.Attack != 0F) {
      Attack = other.Attack;
    }
    if (other.Breaking != 0F) {
      Breaking = other.Breaking;
    }
    if (other.Hp != 0F) {
      Hp = other.Hp;
    }
    if (other.Defense != 0F) {
      Defense = other.Defense;
    }
    if (other.AttackSpeed != 0F) {
      AttackSpeed = other.AttackSpeed;
    }
    if (other.Resume != 0F) {
      Resume = other.Resume;
    }
    if (other.IceAtk != 0F) {
      IceAtk = other.IceAtk;
    }
    if (other.FlameAtk != 0F) {
      FlameAtk = other.FlameAtk;
    }
    if (other.LightningAtk != 0F) {
      LightningAtk = other.LightningAtk;
    }
    if (other.ToxicAtk != 0F) {
      ToxicAtk = other.ToxicAtk;
    }
    if (other.IceResistance != 0F) {
      IceResistance = other.IceResistance;
    }
    if (other.FlameResistance != 0F) {
      FlameResistance = other.FlameResistance;
    }
    if (other.LightningResistance != 0F) {
      LightningResistance = other.LightningResistance;
    }
    if (other.ToxicResistance != 0F) {
      ToxicResistance = other.ToxicResistance;
    }
    if (other.FearResistance != 0F) {
      FearResistance = other.FearResistance;
    }
    if (other.PhysicalResistance != 0F) {
      PhysicalResistance = other.PhysicalResistance;
    }
    if (other.HitRate != 0F) {
      HitRate = other.HitRate;
    }
    if (other.Evade != 0F) {
      Evade = other.Evade;
    }
    if (other.CriticalHitRate != 0F) {
      CriticalHitRate = other.CriticalHitRate;
    }
    if (other.CriticalHitRatio != 0F) {
      CriticalHitRatio = other.CriticalHitRatio;
    }
    if (other.IncreaseInjury != 0F) {
      IncreaseInjury = other.IncreaseInjury;
    }
    if (other.InjuryReduction != 0F) {
      InjuryReduction = other.InjuryReduction;
    }
    if (other.UpgradeExp != 0F) {
      UpgradeExp = other.UpgradeExp;
    }
    if (other.ProductionExp != 0F) {
      ProductionExp = other.ProductionExp;
    }
    if (other.SkillPoint32S != 0F) {
      SkillPoint32S = other.SkillPoint32S;
    }
    if (other.BlockProbability != 0) {
      BlockProbability = other.BlockProbability;
    }
    if (other.BackBlockProbability != 0) {
      BackBlockProbability = other.BackBlockProbability;
    }
    if (other.DodgeProbability != 0) {
      DodgeProbability = other.DodgeProbability;
    }
    if (other.CounterattackProbability != 0) {
      CounterattackProbability = other.CounterattackProbability;
    }
    if (other.Power != 0) {
      Power = other.Power;
    }
    if (other.MaxPower != 0) {
      MaxPower = other.MaxPower;
    }
    if (other.StartTime != 0F) {
      StartTime = other.StartTime;
    }
    if (other.AddPowerSpeed != 0F) {
      AddPowerSpeed = other.AddPowerSpeed;
    }
    if (other.AddPowerNum != 0) {
      AddPowerNum = other.AddPowerNum;
    }
    if (other.Anger != 0F) {
      Anger = other.Anger;
    }
    if (other.MaxAnger != 0F) {
      MaxAnger = other.MaxAnger;
    }
    if (other.StartReduceAngerTime != 0F) {
      StartReduceAngerTime = other.StartReduceAngerTime;
    }
    if (other.ReduceAngerTime != 0F) {
      ReduceAngerTime = other.ReduceAngerTime;
    }
    if (other.ReduceAngerNum != 0F) {
      ReduceAngerNum = other.ReduceAngerNum;
    }
    if (other.QTENum != 0F) {
      QTENum = other.QTENum;
    }
    if (other.KillNum != 0F) {
      KillNum = other.KillNum;
    }
    if (other.ExecutionTotal != 0) {
      ExecutionTotal = other.ExecutionTotal;
    }
    if (other.ExecutionCutDown != 0) {
      ExecutionCutDown = other.ExecutionCutDown;
    }
    if (other.AngerRecoveryPercent != 0F) {
      AngerRecoveryPercent = other.AngerRecoveryPercent;
    }
    if (other.AngerReduce != 0F) {
      AngerReduce = other.AngerReduce;
    }
    if (other.StaminaRecovery != 0F) {
      StaminaRecovery = other.StaminaRecovery;
    }
    if (other.MoveSpeedEx != 0F) {
      MoveSpeedEx = other.MoveSpeedEx;
    }
    if (other.Speed != 0F) {
      Speed = other.Speed;
    }
    if (other.Acceleration != 0F) {
      Acceleration = other.Acceleration;
    }
    if (other.SteeringSpeed != 0F) {
      SteeringSpeed = other.SteeringSpeed;
    }
    if (other.MaxElement != 0F) {
      MaxElement = other.MaxElement;
    }
    if (other.StartReduceElementTime != 0F) {
      StartReduceElementTime = other.StartReduceElementTime;
    }
    if (other.ReduceElementTime != 0F) {
      ReduceElementTime = other.ReduceElementTime;
    }
    if (other.ReduceElementNum != 0F) {
      ReduceElementNum = other.ReduceElementNum;
    }
    if (other.PEx != 0F) {
      PEx = other.PEx;
    }
    if (other.HEx != 0F) {
      HEx = other.HEx;
    }
    if (other.TEx != 0F) {
      TEx = other.TEx;
    }
    if (other.CoinEx != 0F) {
      CoinEx = other.CoinEx;
    }
    if (other.Skillcd != 0F) {
      Skillcd = other.Skillcd;
    }
    if (other.PierceThroughDef != 0F) {
      PierceThroughDef = other.PierceThroughDef;
    }
    if (other.BreakingPro != 0F) {
      BreakingPro = other.BreakingPro;
    }
    if (other.Breaking1 != 0F) {
      Breaking1 = other.Breaking1;
    }
    if (other.Breaking2 != 0F) {
      Breaking2 = other.Breaking2;
    }
    if (other.Breaking3 != 0F) {
      Breaking3 = other.Breaking3;
    }
    if (other.SmallDamage != 0F) {
      SmallDamage = other.SmallDamage;
    }
    if (other.MiddleDamage != 0F) {
      MiddleDamage = other.MiddleDamage;
    }
    if (other.BigDamage != 0F) {
      BigDamage = other.BigDamage;
    }
    if (other.FixedReduction != 0F) {
      FixedReduction = other.FixedReduction;
    }
    if (other.PhysicsReduction != 0F) {
      PhysicsReduction = other.PhysicsReduction;
    }
    if (other.AntiRiot != 0F) {
      AntiRiot = other.AntiRiot;
    }
    if (other.CritReduction != 0F) {
      CritReduction = other.CritReduction;
    }
    if (other.Def1 != 0F) {
      Def1 = other.Def1;
    }
    if (other.Def2 != 0F) {
      Def2 = other.Def2;
    }
    if (other.Def3 != 0F) {
      Def3 = other.Def3;
    }
    if (other.DurEqu != 0F) {
      DurEqu = other.DurEqu;
    }
    if (other.CDR != 0) {
      CDR = other.CDR;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ID = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 24: {
          Lv = input.ReadInt32();
          break;
        }
        case 37: {
          Attack = input.ReadFloat();
          break;
        }
        case 45: {
          Breaking = input.ReadFloat();
          break;
        }
        case 53: {
          Hp = input.ReadFloat();
          break;
        }
        case 61: {
          Defense = input.ReadFloat();
          break;
        }
        case 69: {
          AttackSpeed = input.ReadFloat();
          break;
        }
        case 77: {
          Resume = input.ReadFloat();
          break;
        }
        case 85: {
          IceAtk = input.ReadFloat();
          break;
        }
        case 93: {
          FlameAtk = input.ReadFloat();
          break;
        }
        case 101: {
          LightningAtk = input.ReadFloat();
          break;
        }
        case 109: {
          ToxicAtk = input.ReadFloat();
          break;
        }
        case 117: {
          IceResistance = input.ReadFloat();
          break;
        }
        case 125: {
          FlameResistance = input.ReadFloat();
          break;
        }
        case 133: {
          LightningResistance = input.ReadFloat();
          break;
        }
        case 141: {
          ToxicResistance = input.ReadFloat();
          break;
        }
        case 149: {
          FearResistance = input.ReadFloat();
          break;
        }
        case 157: {
          PhysicalResistance = input.ReadFloat();
          break;
        }
        case 165: {
          HitRate = input.ReadFloat();
          break;
        }
        case 173: {
          Evade = input.ReadFloat();
          break;
        }
        case 181: {
          CriticalHitRate = input.ReadFloat();
          break;
        }
        case 189: {
          CriticalHitRatio = input.ReadFloat();
          break;
        }
        case 197: {
          IncreaseInjury = input.ReadFloat();
          break;
        }
        case 205: {
          InjuryReduction = input.ReadFloat();
          break;
        }
        case 213: {
          UpgradeExp = input.ReadFloat();
          break;
        }
        case 221: {
          ProductionExp = input.ReadFloat();
          break;
        }
        case 229: {
          SkillPoint32S = input.ReadFloat();
          break;
        }
        case 320: {
          BlockProbability = input.ReadInt32();
          break;
        }
        case 328: {
          BackBlockProbability = input.ReadInt32();
          break;
        }
        case 336: {
          DodgeProbability = input.ReadInt32();
          break;
        }
        case 344: {
          CounterattackProbability = input.ReadInt32();
          break;
        }
        case 352: {
          Power = input.ReadInt32();
          break;
        }
        case 360: {
          MaxPower = input.ReadInt32();
          break;
        }
        case 373: {
          StartTime = input.ReadFloat();
          break;
        }
        case 381: {
          AddPowerSpeed = input.ReadFloat();
          break;
        }
        case 384: {
          AddPowerNum = input.ReadInt32();
          break;
        }
        case 397: {
          Anger = input.ReadFloat();
          break;
        }
        case 405: {
          MaxAnger = input.ReadFloat();
          break;
        }
        case 413: {
          StartReduceAngerTime = input.ReadFloat();
          break;
        }
        case 421: {
          ReduceAngerTime = input.ReadFloat();
          break;
        }
        case 429: {
          ReduceAngerNum = input.ReadFloat();
          break;
        }
        case 437: {
          QTENum = input.ReadFloat();
          break;
        }
        case 445: {
          KillNum = input.ReadFloat();
          break;
        }
        case 448: {
          ExecutionTotal = input.ReadInt32();
          break;
        }
        case 456: {
          ExecutionCutDown = input.ReadInt32();
          break;
        }
        case 469: {
          AngerRecoveryPercent = input.ReadFloat();
          break;
        }
        case 477: {
          AngerReduce = input.ReadFloat();
          break;
        }
        case 485: {
          StaminaRecovery = input.ReadFloat();
          break;
        }
        case 493: {
          MoveSpeedEx = input.ReadFloat();
          break;
        }
        case 501: {
          Speed = input.ReadFloat();
          break;
        }
        case 509: {
          Acceleration = input.ReadFloat();
          break;
        }
        case 517: {
          SteeringSpeed = input.ReadFloat();
          break;
        }
        case 525: {
          MaxElement = input.ReadFloat();
          break;
        }
        case 533: {
          StartReduceElementTime = input.ReadFloat();
          break;
        }
        case 541: {
          ReduceElementTime = input.ReadFloat();
          break;
        }
        case 549: {
          ReduceElementNum = input.ReadFloat();
          break;
        }
        case 557: {
          PEx = input.ReadFloat();
          break;
        }
        case 565: {
          HEx = input.ReadFloat();
          break;
        }
        case 573: {
          TEx = input.ReadFloat();
          break;
        }
        case 581: {
          CoinEx = input.ReadFloat();
          break;
        }
        case 589: {
          Skillcd = input.ReadFloat();
          break;
        }
        case 597: {
          PierceThroughDef = input.ReadFloat();
          break;
        }
        case 605: {
          BreakingPro = input.ReadFloat();
          break;
        }
        case 613: {
          Breaking1 = input.ReadFloat();
          break;
        }
        case 621: {
          Breaking2 = input.ReadFloat();
          break;
        }
        case 629: {
          Breaking3 = input.ReadFloat();
          break;
        }
        case 637: {
          SmallDamage = input.ReadFloat();
          break;
        }
        case 645: {
          MiddleDamage = input.ReadFloat();
          break;
        }
        case 653: {
          BigDamage = input.ReadFloat();
          break;
        }
        case 661: {
          FixedReduction = input.ReadFloat();
          break;
        }
        case 669: {
          PhysicsReduction = input.ReadFloat();
          break;
        }
        case 677: {
          AntiRiot = input.ReadFloat();
          break;
        }
        case 685: {
          CritReduction = input.ReadFloat();
          break;
        }
        case 693: {
          Def1 = input.ReadFloat();
          break;
        }
        case 701: {
          Def2 = input.ReadFloat();
          break;
        }
        case 709: {
          Def3 = input.ReadFloat();
          break;
        }
        case 717: {
          DurEqu = input.ReadFloat();
          break;
        }
        case 720: {
          CDR = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ID = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 24: {
          Lv = input.ReadInt32();
          break;
        }
        case 37: {
          Attack = input.ReadFloat();
          break;
        }
        case 45: {
          Breaking = input.ReadFloat();
          break;
        }
        case 53: {
          Hp = input.ReadFloat();
          break;
        }
        case 61: {
          Defense = input.ReadFloat();
          break;
        }
        case 69: {
          AttackSpeed = input.ReadFloat();
          break;
        }
        case 77: {
          Resume = input.ReadFloat();
          break;
        }
        case 85: {
          IceAtk = input.ReadFloat();
          break;
        }
        case 93: {
          FlameAtk = input.ReadFloat();
          break;
        }
        case 101: {
          LightningAtk = input.ReadFloat();
          break;
        }
        case 109: {
          ToxicAtk = input.ReadFloat();
          break;
        }
        case 117: {
          IceResistance = input.ReadFloat();
          break;
        }
        case 125: {
          FlameResistance = input.ReadFloat();
          break;
        }
        case 133: {
          LightningResistance = input.ReadFloat();
          break;
        }
        case 141: {
          ToxicResistance = input.ReadFloat();
          break;
        }
        case 149: {
          FearResistance = input.ReadFloat();
          break;
        }
        case 157: {
          PhysicalResistance = input.ReadFloat();
          break;
        }
        case 165: {
          HitRate = input.ReadFloat();
          break;
        }
        case 173: {
          Evade = input.ReadFloat();
          break;
        }
        case 181: {
          CriticalHitRate = input.ReadFloat();
          break;
        }
        case 189: {
          CriticalHitRatio = input.ReadFloat();
          break;
        }
        case 197: {
          IncreaseInjury = input.ReadFloat();
          break;
        }
        case 205: {
          InjuryReduction = input.ReadFloat();
          break;
        }
        case 213: {
          UpgradeExp = input.ReadFloat();
          break;
        }
        case 221: {
          ProductionExp = input.ReadFloat();
          break;
        }
        case 229: {
          SkillPoint32S = input.ReadFloat();
          break;
        }
        case 320: {
          BlockProbability = input.ReadInt32();
          break;
        }
        case 328: {
          BackBlockProbability = input.ReadInt32();
          break;
        }
        case 336: {
          DodgeProbability = input.ReadInt32();
          break;
        }
        case 344: {
          CounterattackProbability = input.ReadInt32();
          break;
        }
        case 352: {
          Power = input.ReadInt32();
          break;
        }
        case 360: {
          MaxPower = input.ReadInt32();
          break;
        }
        case 373: {
          StartTime = input.ReadFloat();
          break;
        }
        case 381: {
          AddPowerSpeed = input.ReadFloat();
          break;
        }
        case 384: {
          AddPowerNum = input.ReadInt32();
          break;
        }
        case 397: {
          Anger = input.ReadFloat();
          break;
        }
        case 405: {
          MaxAnger = input.ReadFloat();
          break;
        }
        case 413: {
          StartReduceAngerTime = input.ReadFloat();
          break;
        }
        case 421: {
          ReduceAngerTime = input.ReadFloat();
          break;
        }
        case 429: {
          ReduceAngerNum = input.ReadFloat();
          break;
        }
        case 437: {
          QTENum = input.ReadFloat();
          break;
        }
        case 445: {
          KillNum = input.ReadFloat();
          break;
        }
        case 448: {
          ExecutionTotal = input.ReadInt32();
          break;
        }
        case 456: {
          ExecutionCutDown = input.ReadInt32();
          break;
        }
        case 469: {
          AngerRecoveryPercent = input.ReadFloat();
          break;
        }
        case 477: {
          AngerReduce = input.ReadFloat();
          break;
        }
        case 485: {
          StaminaRecovery = input.ReadFloat();
          break;
        }
        case 493: {
          MoveSpeedEx = input.ReadFloat();
          break;
        }
        case 501: {
          Speed = input.ReadFloat();
          break;
        }
        case 509: {
          Acceleration = input.ReadFloat();
          break;
        }
        case 517: {
          SteeringSpeed = input.ReadFloat();
          break;
        }
        case 525: {
          MaxElement = input.ReadFloat();
          break;
        }
        case 533: {
          StartReduceElementTime = input.ReadFloat();
          break;
        }
        case 541: {
          ReduceElementTime = input.ReadFloat();
          break;
        }
        case 549: {
          ReduceElementNum = input.ReadFloat();
          break;
        }
        case 557: {
          PEx = input.ReadFloat();
          break;
        }
        case 565: {
          HEx = input.ReadFloat();
          break;
        }
        case 573: {
          TEx = input.ReadFloat();
          break;
        }
        case 581: {
          CoinEx = input.ReadFloat();
          break;
        }
        case 589: {
          Skillcd = input.ReadFloat();
          break;
        }
        case 597: {
          PierceThroughDef = input.ReadFloat();
          break;
        }
        case 605: {
          BreakingPro = input.ReadFloat();
          break;
        }
        case 613: {
          Breaking1 = input.ReadFloat();
          break;
        }
        case 621: {
          Breaking2 = input.ReadFloat();
          break;
        }
        case 629: {
          Breaking3 = input.ReadFloat();
          break;
        }
        case 637: {
          SmallDamage = input.ReadFloat();
          break;
        }
        case 645: {
          MiddleDamage = input.ReadFloat();
          break;
        }
        case 653: {
          BigDamage = input.ReadFloat();
          break;
        }
        case 661: {
          FixedReduction = input.ReadFloat();
          break;
        }
        case 669: {
          PhysicsReduction = input.ReadFloat();
          break;
        }
        case 677: {
          AntiRiot = input.ReadFloat();
          break;
        }
        case 685: {
          CritReduction = input.ReadFloat();
          break;
        }
        case 693: {
          Def1 = input.ReadFloat();
          break;
        }
        case 701: {
          Def2 = input.ReadFloat();
          break;
        }
        case 709: {
          Def3 = input.ReadFloat();
          break;
        }
        case 717: {
          DurEqu = input.ReadFloat();
          break;
        }
        case 720: {
          CDR = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///战马数据
/// </summary>
public sealed partial class Horse_Data : pb::IMessage<Horse_Data>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Horse_Data> _parser = new pb::MessageParser<Horse_Data>(() => new Horse_Data());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<Horse_Data> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerMessageReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Horse_Data() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Horse_Data(Horse_Data other) : this() {
    id_ = other.id_;
    state_ = other.state_;
    pos_ = other.pos_ != null ? other.pos_.Clone() : null;
    rot_ = other.rot_ != null ? other.rot_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Horse_Data Clone() {
    return new Horse_Data(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///全局唯一ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 2;
  private int state_;
  /// <summary>
  ///状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 3;
  private global::Vector3 pos_;
  /// <summary>
  ///位置
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector3 Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "rot" field.</summary>
  public const int RotFieldNumber = 4;
  private global::Vector3 rot_;
  /// <summary>
  ///角度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector3 Rot {
    get { return rot_; }
    set {
      rot_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as Horse_Data);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(Horse_Data other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (State != other.State) return false;
    if (!object.Equals(Pos, other.Pos)) return false;
    if (!object.Equals(Rot, other.Rot)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (State != 0) hash ^= State.GetHashCode();
    if (pos_ != null) hash ^= Pos.GetHashCode();
    if (rot_ != null) hash ^= Rot.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (State != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(State);
    }
    if (pos_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Pos);
    }
    if (rot_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Rot);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (State != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(State);
    }
    if (pos_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Pos);
    }
    if (rot_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Rot);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
    }
    if (pos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
    }
    if (rot_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rot);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(Horse_Data other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.State != 0) {
      State = other.State;
    }
    if (other.pos_ != null) {
      if (pos_ == null) {
        Pos = new global::Vector3();
      }
      Pos.MergeFrom(other.Pos);
    }
    if (other.rot_ != null) {
      if (rot_ == null) {
        Rot = new global::Vector3();
      }
      Rot.MergeFrom(other.Rot);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          State = input.ReadInt32();
          break;
        }
        case 26: {
          if (pos_ == null) {
            Pos = new global::Vector3();
          }
          input.ReadMessage(Pos);
          break;
        }
        case 34: {
          if (rot_ == null) {
            Rot = new global::Vector3();
          }
          input.ReadMessage(Rot);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          State = input.ReadInt32();
          break;
        }
        case 26: {
          if (pos_ == null) {
            Pos = new global::Vector3();
          }
          input.ReadMessage(Pos);
          break;
        }
        case 34: {
          if (rot_ == null) {
            Rot = new global::Vector3();
          }
          input.ReadMessage(Rot);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///场景NPC数据
/// </summary>
public sealed partial class SceneNPCData : pb::IMessage<SceneNPCData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SceneNPCData> _parser = new pb::MessageParser<SceneNPCData>(() => new SceneNPCData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SceneNPCData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerMessageReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SceneNPCData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SceneNPCData(SceneNPCData other) : this() {
    ai_ = other.ai_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SceneNPCData Clone() {
    return new SceneNPCData(this);
  }

  /// <summary>Field number for the "ai" field.</summary>
  public const int AiFieldNumber = 1;
  private static readonly pbc::MapField<string, global::AIData>.Codec _map_ai_codec
      = new pbc::MapField<string, global::AIData>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::AIData.Parser), 10);
  private readonly pbc::MapField<string, global::AIData> ai_ = new pbc::MapField<string, global::AIData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::MapField<string, global::AIData> Ai {
    get { return ai_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SceneNPCData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SceneNPCData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Ai.Equals(other.Ai)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Ai.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    ai_.WriteTo(output, _map_ai_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    ai_.WriteTo(ref output, _map_ai_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += ai_.CalculateSize(_map_ai_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SceneNPCData other) {
    if (other == null) {
      return;
    }
    ai_.Add(other.ai_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ai_.AddEntriesFrom(input, _map_ai_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          ai_.AddEntriesFrom(ref input, _map_ai_codec);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class AIData : pb::IMessage<AIData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<AIData> _parser = new pb::MessageParser<AIData>(() => new AIData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<AIData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerMessageReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public AIData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public AIData(AIData other) : this() {
    cs_ = other.cs_;
    tc_ = other.tc_ != null ? other.tc_.Clone() : null;
    ac_ = other.ac_ != null ? other.ac_.Clone() : null;
    ao_ = other.ao_ != null ? other.ao_.Clone() : null;
    n_ = other.n_;
    y_ = other.y_;
    uid_ = other.uid_;
    l_ = other.l_;
    g_ = other.g_;
    c_ = other.c_;
    di_ = other.di_;
    st_ = other.st_.Clone();
    scd_ = other.scd_.Clone();
    sp_ = other.sp_ != null ? other.sp_.Clone() : null;
    sr_ = other.sr_ != null ? other.sr_.Clone() : null;
    lp_ = other.lp_ != null ? other.lp_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public AIData Clone() {
    return new AIData(this);
  }

  /// <summary>Field number for the "cs" field.</summary>
  public const int CsFieldNumber = 1;
  private int cs_;
  /// <summary>
  ///当前状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Cs {
    get { return cs_; }
    set {
      cs_ = value;
    }
  }

  /// <summary>Field number for the "tc" field.</summary>
  public const int TcFieldNumber = 2;
  private global::TeamFollowConfig tc_;
  /// <summary>
  ///跟随配置
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::TeamFollowConfig Tc {
    get { return tc_; }
    set {
      tc_ = value;
    }
  }

  /// <summary>Field number for the "ac" field.</summary>
  public const int AcFieldNumber = 3;
  private global::UnitAttributeEntity ac_;
  /// <summary>
  ///当前的战斗属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::UnitAttributeEntity Ac {
    get { return ac_; }
    set {
      ac_ = value;
    }
  }

  /// <summary>Field number for the "ao" field.</summary>
  public const int AoFieldNumber = 4;
  private global::UnitAttributeEntity ao_;
  /// <summary>
  ///总属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::UnitAttributeEntity Ao {
    get { return ao_; }
    set {
      ao_ = value;
    }
  }

  /// <summary>Field number for the "n" field.</summary>
  public const int NFieldNumber = 5;
  private string n_ = "";
  /// <summary>
  ///name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string N {
    get { return n_; }
    set {
      n_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 6;
  private bool y_;
  /// <summary>
  ///是否已初始化
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 7;
  private string uid_ = "";
  /// <summary>
  ///单位ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Uid {
    get { return uid_; }
    set {
      uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "l" field.</summary>
  public const int LFieldNumber = 8;
  private int l_;
  /// <summary>
  ///等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int L {
    get { return l_; }
    set {
      l_ = value;
    }
  }

  /// <summary>Field number for the "g" field.</summary>
  public const int GFieldNumber = 9;
  private string g_ = "";
  /// <summary>
  ///群组ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string G {
    get { return g_; }
    set {
      g_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "c" field.</summary>
  public const int CFieldNumber = 10;
  private int c_;
  /// <summary>
  ///阵营
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int C {
    get { return c_; }
    set {
      c_ = value;
    }
  }

  /// <summary>Field number for the "di" field.</summary>
  public const int DiFieldNumber = 11;
  private bool di_;
  /// <summary>
  ///禁用指令输入
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Di {
    get { return di_; }
    set {
      di_ = value;
    }
  }

  /// <summary>Field number for the "st" field.</summary>
  public const int StFieldNumber = 12;
  private static readonly pbc::MapField<int, float>.Codec _map_st_codec
      = new pbc::MapField<int, float>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForFloat(21, 0F), 98);
  private readonly pbc::MapField<int, float> st_ = new pbc::MapField<int, float>();
  /// <summary>
  ///状态触发时间记录
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::MapField<int, float> St {
    get { return st_; }
  }

  /// <summary>Field number for the "scd" field.</summary>
  public const int ScdFieldNumber = 13;
  private static readonly pbc::MapField<int, float>.Codec _map_scd_codec
      = new pbc::MapField<int, float>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForFloat(21, 0F), 106);
  private readonly pbc::MapField<int, float> scd_ = new pbc::MapField<int, float>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::MapField<int, float> Scd {
    get { return scd_; }
  }

  /// <summary>Field number for the "sp" field.</summary>
  public const int SpFieldNumber = 14;
  private global::Vector3 sp_;
  /// <summary>
  ///出生位置
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector3 Sp {
    get { return sp_; }
    set {
      sp_ = value;
    }
  }

  /// <summary>Field number for the "sr" field.</summary>
  public const int SrFieldNumber = 15;
  private global::Vector3 sr_;
  /// <summary>
  ///出生角度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector3 Sr {
    get { return sr_; }
    set {
      sr_ = value;
    }
  }

  /// <summary>Field number for the "lp" field.</summary>
  public const int LpFieldNumber = 16;
  private global::Vector3 lp_;
  /// <summary>
  ///离开战斗前的位置
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector3 Lp {
    get { return lp_; }
    set {
      lp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as AIData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(AIData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Cs != other.Cs) return false;
    if (!object.Equals(Tc, other.Tc)) return false;
    if (!object.Equals(Ac, other.Ac)) return false;
    if (!object.Equals(Ao, other.Ao)) return false;
    if (N != other.N) return false;
    if (Y != other.Y) return false;
    if (Uid != other.Uid) return false;
    if (L != other.L) return false;
    if (G != other.G) return false;
    if (C != other.C) return false;
    if (Di != other.Di) return false;
    if (!St.Equals(other.St)) return false;
    if (!Scd.Equals(other.Scd)) return false;
    if (!object.Equals(Sp, other.Sp)) return false;
    if (!object.Equals(Sr, other.Sr)) return false;
    if (!object.Equals(Lp, other.Lp)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Cs != 0) hash ^= Cs.GetHashCode();
    if (tc_ != null) hash ^= Tc.GetHashCode();
    if (ac_ != null) hash ^= Ac.GetHashCode();
    if (ao_ != null) hash ^= Ao.GetHashCode();
    if (N.Length != 0) hash ^= N.GetHashCode();
    if (Y != false) hash ^= Y.GetHashCode();
    if (Uid.Length != 0) hash ^= Uid.GetHashCode();
    if (L != 0) hash ^= L.GetHashCode();
    if (G.Length != 0) hash ^= G.GetHashCode();
    if (C != 0) hash ^= C.GetHashCode();
    if (Di != false) hash ^= Di.GetHashCode();
    hash ^= St.GetHashCode();
    hash ^= Scd.GetHashCode();
    if (sp_ != null) hash ^= Sp.GetHashCode();
    if (sr_ != null) hash ^= Sr.GetHashCode();
    if (lp_ != null) hash ^= Lp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Cs != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Cs);
    }
    if (tc_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Tc);
    }
    if (ac_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Ac);
    }
    if (ao_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Ao);
    }
    if (N.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(N);
    }
    if (Y != false) {
      output.WriteRawTag(48);
      output.WriteBool(Y);
    }
    if (Uid.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Uid);
    }
    if (L != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(L);
    }
    if (G.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(G);
    }
    if (C != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(C);
    }
    if (Di != false) {
      output.WriteRawTag(88);
      output.WriteBool(Di);
    }
    st_.WriteTo(output, _map_st_codec);
    scd_.WriteTo(output, _map_scd_codec);
    if (sp_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(Sp);
    }
    if (sr_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(Sr);
    }
    if (lp_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(Lp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Cs != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Cs);
    }
    if (tc_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Tc);
    }
    if (ac_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Ac);
    }
    if (ao_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Ao);
    }
    if (N.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(N);
    }
    if (Y != false) {
      output.WriteRawTag(48);
      output.WriteBool(Y);
    }
    if (Uid.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Uid);
    }
    if (L != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(L);
    }
    if (G.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(G);
    }
    if (C != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(C);
    }
    if (Di != false) {
      output.WriteRawTag(88);
      output.WriteBool(Di);
    }
    st_.WriteTo(ref output, _map_st_codec);
    scd_.WriteTo(ref output, _map_scd_codec);
    if (sp_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(Sp);
    }
    if (sr_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(Sr);
    }
    if (lp_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(Lp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Cs != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cs);
    }
    if (tc_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tc);
    }
    if (ac_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ac);
    }
    if (ao_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ao);
    }
    if (N.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(N);
    }
    if (Y != false) {
      size += 1 + 1;
    }
    if (Uid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
    }
    if (L != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(L);
    }
    if (G.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(G);
    }
    if (C != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(C);
    }
    if (Di != false) {
      size += 1 + 1;
    }
    size += st_.CalculateSize(_map_st_codec);
    size += scd_.CalculateSize(_map_scd_codec);
    if (sp_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sp);
    }
    if (sr_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sr);
    }
    if (lp_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Lp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(AIData other) {
    if (other == null) {
      return;
    }
    if (other.Cs != 0) {
      Cs = other.Cs;
    }
    if (other.tc_ != null) {
      if (tc_ == null) {
        Tc = new global::TeamFollowConfig();
      }
      Tc.MergeFrom(other.Tc);
    }
    if (other.ac_ != null) {
      if (ac_ == null) {
        Ac = new global::UnitAttributeEntity();
      }
      Ac.MergeFrom(other.Ac);
    }
    if (other.ao_ != null) {
      if (ao_ == null) {
        Ao = new global::UnitAttributeEntity();
      }
      Ao.MergeFrom(other.Ao);
    }
    if (other.N.Length != 0) {
      N = other.N;
    }
    if (other.Y != false) {
      Y = other.Y;
    }
    if (other.Uid.Length != 0) {
      Uid = other.Uid;
    }
    if (other.L != 0) {
      L = other.L;
    }
    if (other.G.Length != 0) {
      G = other.G;
    }
    if (other.C != 0) {
      C = other.C;
    }
    if (other.Di != false) {
      Di = other.Di;
    }
    st_.Add(other.st_);
    scd_.Add(other.scd_);
    if (other.sp_ != null) {
      if (sp_ == null) {
        Sp = new global::Vector3();
      }
      Sp.MergeFrom(other.Sp);
    }
    if (other.sr_ != null) {
      if (sr_ == null) {
        Sr = new global::Vector3();
      }
      Sr.MergeFrom(other.Sr);
    }
    if (other.lp_ != null) {
      if (lp_ == null) {
        Lp = new global::Vector3();
      }
      Lp.MergeFrom(other.Lp);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Cs = input.ReadInt32();
          break;
        }
        case 18: {
          if (tc_ == null) {
            Tc = new global::TeamFollowConfig();
          }
          input.ReadMessage(Tc);
          break;
        }
        case 26: {
          if (ac_ == null) {
            Ac = new global::UnitAttributeEntity();
          }
          input.ReadMessage(Ac);
          break;
        }
        case 34: {
          if (ao_ == null) {
            Ao = new global::UnitAttributeEntity();
          }
          input.ReadMessage(Ao);
          break;
        }
        case 42: {
          N = input.ReadString();
          break;
        }
        case 48: {
          Y = input.ReadBool();
          break;
        }
        case 58: {
          Uid = input.ReadString();
          break;
        }
        case 64: {
          L = input.ReadInt32();
          break;
        }
        case 74: {
          G = input.ReadString();
          break;
        }
        case 80: {
          C = input.ReadInt32();
          break;
        }
        case 88: {
          Di = input.ReadBool();
          break;
        }
        case 98: {
          st_.AddEntriesFrom(input, _map_st_codec);
          break;
        }
        case 106: {
          scd_.AddEntriesFrom(input, _map_scd_codec);
          break;
        }
        case 114: {
          if (sp_ == null) {
            Sp = new global::Vector3();
          }
          input.ReadMessage(Sp);
          break;
        }
        case 122: {
          if (sr_ == null) {
            Sr = new global::Vector3();
          }
          input.ReadMessage(Sr);
          break;
        }
        case 130: {
          if (lp_ == null) {
            Lp = new global::Vector3();
          }
          input.ReadMessage(Lp);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Cs = input.ReadInt32();
          break;
        }
        case 18: {
          if (tc_ == null) {
            Tc = new global::TeamFollowConfig();
          }
          input.ReadMessage(Tc);
          break;
        }
        case 26: {
          if (ac_ == null) {
            Ac = new global::UnitAttributeEntity();
          }
          input.ReadMessage(Ac);
          break;
        }
        case 34: {
          if (ao_ == null) {
            Ao = new global::UnitAttributeEntity();
          }
          input.ReadMessage(Ao);
          break;
        }
        case 42: {
          N = input.ReadString();
          break;
        }
        case 48: {
          Y = input.ReadBool();
          break;
        }
        case 58: {
          Uid = input.ReadString();
          break;
        }
        case 64: {
          L = input.ReadInt32();
          break;
        }
        case 74: {
          G = input.ReadString();
          break;
        }
        case 80: {
          C = input.ReadInt32();
          break;
        }
        case 88: {
          Di = input.ReadBool();
          break;
        }
        case 98: {
          st_.AddEntriesFrom(ref input, _map_st_codec);
          break;
        }
        case 106: {
          scd_.AddEntriesFrom(ref input, _map_scd_codec);
          break;
        }
        case 114: {
          if (sp_ == null) {
            Sp = new global::Vector3();
          }
          input.ReadMessage(Sp);
          break;
        }
        case 122: {
          if (sr_ == null) {
            Sr = new global::Vector3();
          }
          input.ReadMessage(Sr);
          break;
        }
        case 130: {
          if (lp_ == null) {
            Lp = new global::Vector3();
          }
          input.ReadMessage(Lp);
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class TeamFollowConfig : pb::IMessage<TeamFollowConfig>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<TeamFollowConfig> _parser = new pb::MessageParser<TeamFollowConfig>(() => new TeamFollowConfig());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<TeamFollowConfig> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerMessageReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public TeamFollowConfig() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public TeamFollowConfig(TeamFollowConfig other) : this() {
    dofollow_ = other.dofollow_;
    attackType_ = other.attackType_;
    beFollowUnit_ = other.beFollowUnit_;
    avoidCombat_ = other.avoidCombat_;
    bubbleText_ = other.bubbleText_;
    isAlwaysFollow_ = other.isAlwaysFollow_;
    onTimeLineFollow_ = other.onTimeLineFollow_;
    isJump_ = other.isJump_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public TeamFollowConfig Clone() {
    return new TeamFollowConfig(this);
  }

  /// <summary>Field number for the "dofollow" field.</summary>
  public const int DofollowFieldNumber = 1;
  private bool dofollow_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Dofollow {
    get { return dofollow_; }
    set {
      dofollow_ = value;
    }
  }

  /// <summary>Field number for the "attackType" field.</summary>
  public const int AttackTypeFieldNumber = 2;
  private int attackType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int AttackType {
    get { return attackType_; }
    set {
      attackType_ = value;
    }
  }

  /// <summary>Field number for the "be_follow_unit" field.</summary>
  public const int BeFollowUnitFieldNumber = 3;
  private string beFollowUnit_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string BeFollowUnit {
    get { return beFollowUnit_; }
    set {
      beFollowUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avoidCombat" field.</summary>
  public const int AvoidCombatFieldNumber = 4;
  private bool avoidCombat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AvoidCombat {
    get { return avoidCombat_; }
    set {
      avoidCombat_ = value;
    }
  }

  /// <summary>Field number for the "bubbleText" field.</summary>
  public const int BubbleTextFieldNumber = 5;
  private string bubbleText_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string BubbleText {
    get { return bubbleText_; }
    set {
      bubbleText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "isAlwaysFollow" field.</summary>
  public const int IsAlwaysFollowFieldNumber = 6;
  private bool isAlwaysFollow_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsAlwaysFollow {
    get { return isAlwaysFollow_; }
    set {
      isAlwaysFollow_ = value;
    }
  }

  /// <summary>Field number for the "onTimeLineFollow" field.</summary>
  public const int OnTimeLineFollowFieldNumber = 7;
  private bool onTimeLineFollow_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool OnTimeLineFollow {
    get { return onTimeLineFollow_; }
    set {
      onTimeLineFollow_ = value;
    }
  }

  /// <summary>Field number for the "isJump" field.</summary>
  public const int IsJumpFieldNumber = 8;
  private bool isJump_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsJump {
    get { return isJump_; }
    set {
      isJump_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as TeamFollowConfig);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(TeamFollowConfig other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Dofollow != other.Dofollow) return false;
    if (AttackType != other.AttackType) return false;
    if (BeFollowUnit != other.BeFollowUnit) return false;
    if (AvoidCombat != other.AvoidCombat) return false;
    if (BubbleText != other.BubbleText) return false;
    if (IsAlwaysFollow != other.IsAlwaysFollow) return false;
    if (OnTimeLineFollow != other.OnTimeLineFollow) return false;
    if (IsJump != other.IsJump) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Dofollow != false) hash ^= Dofollow.GetHashCode();
    if (AttackType != 0) hash ^= AttackType.GetHashCode();
    if (BeFollowUnit.Length != 0) hash ^= BeFollowUnit.GetHashCode();
    if (AvoidCombat != false) hash ^= AvoidCombat.GetHashCode();
    if (BubbleText.Length != 0) hash ^= BubbleText.GetHashCode();
    if (IsAlwaysFollow != false) hash ^= IsAlwaysFollow.GetHashCode();
    if (OnTimeLineFollow != false) hash ^= OnTimeLineFollow.GetHashCode();
    if (IsJump != false) hash ^= IsJump.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Dofollow != false) {
      output.WriteRawTag(8);
      output.WriteBool(Dofollow);
    }
    if (AttackType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(AttackType);
    }
    if (BeFollowUnit.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(BeFollowUnit);
    }
    if (AvoidCombat != false) {
      output.WriteRawTag(32);
      output.WriteBool(AvoidCombat);
    }
    if (BubbleText.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(BubbleText);
    }
    if (IsAlwaysFollow != false) {
      output.WriteRawTag(48);
      output.WriteBool(IsAlwaysFollow);
    }
    if (OnTimeLineFollow != false) {
      output.WriteRawTag(56);
      output.WriteBool(OnTimeLineFollow);
    }
    if (IsJump != false) {
      output.WriteRawTag(64);
      output.WriteBool(IsJump);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Dofollow != false) {
      output.WriteRawTag(8);
      output.WriteBool(Dofollow);
    }
    if (AttackType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(AttackType);
    }
    if (BeFollowUnit.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(BeFollowUnit);
    }
    if (AvoidCombat != false) {
      output.WriteRawTag(32);
      output.WriteBool(AvoidCombat);
    }
    if (BubbleText.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(BubbleText);
    }
    if (IsAlwaysFollow != false) {
      output.WriteRawTag(48);
      output.WriteBool(IsAlwaysFollow);
    }
    if (OnTimeLineFollow != false) {
      output.WriteRawTag(56);
      output.WriteBool(OnTimeLineFollow);
    }
    if (IsJump != false) {
      output.WriteRawTag(64);
      output.WriteBool(IsJump);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Dofollow != false) {
      size += 1 + 1;
    }
    if (AttackType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackType);
    }
    if (BeFollowUnit.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BeFollowUnit);
    }
    if (AvoidCombat != false) {
      size += 1 + 1;
    }
    if (BubbleText.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BubbleText);
    }
    if (IsAlwaysFollow != false) {
      size += 1 + 1;
    }
    if (OnTimeLineFollow != false) {
      size += 1 + 1;
    }
    if (IsJump != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(TeamFollowConfig other) {
    if (other == null) {
      return;
    }
    if (other.Dofollow != false) {
      Dofollow = other.Dofollow;
    }
    if (other.AttackType != 0) {
      AttackType = other.AttackType;
    }
    if (other.BeFollowUnit.Length != 0) {
      BeFollowUnit = other.BeFollowUnit;
    }
    if (other.AvoidCombat != false) {
      AvoidCombat = other.AvoidCombat;
    }
    if (other.BubbleText.Length != 0) {
      BubbleText = other.BubbleText;
    }
    if (other.IsAlwaysFollow != false) {
      IsAlwaysFollow = other.IsAlwaysFollow;
    }
    if (other.OnTimeLineFollow != false) {
      OnTimeLineFollow = other.OnTimeLineFollow;
    }
    if (other.IsJump != false) {
      IsJump = other.IsJump;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Dofollow = input.ReadBool();
          break;
        }
        case 16: {
          AttackType = input.ReadInt32();
          break;
        }
        case 26: {
          BeFollowUnit = input.ReadString();
          break;
        }
        case 32: {
          AvoidCombat = input.ReadBool();
          break;
        }
        case 42: {
          BubbleText = input.ReadString();
          break;
        }
        case 48: {
          IsAlwaysFollow = input.ReadBool();
          break;
        }
        case 56: {
          OnTimeLineFollow = input.ReadBool();
          break;
        }
        case 64: {
          IsJump = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Dofollow = input.ReadBool();
          break;
        }
        case 16: {
          AttackType = input.ReadInt32();
          break;
        }
        case 26: {
          BeFollowUnit = input.ReadString();
          break;
        }
        case 32: {
          AvoidCombat = input.ReadBool();
          break;
        }
        case 42: {
          BubbleText = input.ReadString();
          break;
        }
        case 48: {
          IsAlwaysFollow = input.ReadBool();
          break;
        }
        case 56: {
          OnTimeLineFollow = input.ReadBool();
          break;
        }
        case 64: {
          IsJump = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
